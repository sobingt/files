/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
export class PdfZoomToolbarComponent {
    constructor() {
        this.zoomChange = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    emitZoomChange(event) {
        debugger;
        this.zoomChange.emit(event);
    }
}
PdfZoomToolbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'pdf-zoom-toolbar',
                template: "<div [class.invisible]=\"!showZoomButtons\" id=\"toolbarViewerMiddle\">\n  <div class=\"splitToolbarButton\">\n    <button type=\"button\"\n            id=\"zoomOut\"\n            class=\"toolbarButton zoomOut\"\n            title=\"Zoom Out\"\n            tabindex=\"21\"\n            data-l10n-id=\"zoom_out\">\n              <span data-l10n-id=\"zoom_out_label\">Zoom Out</span>\n    </button>\n    <div class=\"splitToolbarButtonSeparator\"></div>\n    <button type=\"button\"\n            id=\"zoomIn\"\n            class=\"toolbarButton zoomIn\"\n            title=\"Zoom In\"\n            tabindex=\"22\"\n            data-l10n-id=\"zoom_in\">\n      <span data-l10n-id=\"zoom_in_label\">Zoom In</span>\n    </button>\n  </div>\n  <pdf-zoom-dropdown\n      style=\"width: unset; max-width: unset;padding-top:6px\"\n      (zoomChange)=\"emitZoomChange($event)\"></pdf-zoom-dropdown>\n</div>\n",
                styles: [""]
            }] }
];
PdfZoomToolbarComponent.propDecorators = {
    showZoomButtons: [{ type: Input }],
    zoomChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    PdfZoomToolbarComponent.prototype.showZoomButtons;
    /** @type {?} */
    PdfZoomToolbarComponent.prototype.zoomChange;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGRmLXpvb20tdG9vbGJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZXh0ZW5kZWQtcGRmLXZpZXdlci8iLCJzb3VyY2VzIjpbImxpYi90b29sYmFyL3BkZi16b29tLXRvb2xiYXIvcGRmLXpvb20tdG9vbGJhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFPL0UsTUFBTSxPQUFPLHVCQUF1QjtJQUxwQztRQVVTLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBK0IsQ0FBQztJQVF0RSxDQUFDOzs7OztJQU5RLGNBQWMsQ0FBQyxLQUFrQztRQUN0RCxRQUFRLENBQUM7UUFDVCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QixDQUFDOzs7WUFmRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsODRCQUFnRDs7YUFFakQ7Ozs4QkFFRSxLQUFLO3lCQUdMLE1BQU07Ozs7SUFIUCxrREFDZ0M7O0lBRWhDLDZDQUNvRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncGRmLXpvb20tdG9vbGJhcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9wZGYtem9vbS10b29sYmFyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vcGRmLXpvb20tdG9vbGJhci5jb21wb25lbnQuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgUGRmWm9vbVRvb2xiYXJDb21wb25lbnQge1xuICBASW5wdXQoKVxuICBwdWJsaWMgc2hvd1pvb21CdXR0b25zOiBib29sZWFuO1xuXG4gIEBPdXRwdXQoKVxuICBwdWJsaWMgem9vbUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nIHwgbnVtYmVyIHwgdW5kZWZpbmVkPigpO1xuXG4gIHB1YmxpYyBlbWl0Wm9vbUNoYW5nZShldmVudDogc3RyaW5nIHwgbnVtYmVyIHwgdW5kZWZpbmVkKTogdm9pZCB7XG4gICAgZGVidWdnZXI7XG4gICAgdGhpcy56b29tQ2hhbmdlLmVtaXQoZXZlbnQpO1xuICB9XG5cblxufVxuIl19