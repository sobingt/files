{"remainingRequest":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/chartjs-plugin-doughnutlabel/dist/chartjs-plugin-doughnutlabel.js","dependencies":[{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/chartjs-plugin-doughnutlabel/dist/chartjs-plugin-doughnutlabel.js","mtime":1596454944000},{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/cache-loader/dist/cjs.js","mtime":1596454942000},{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1596454940000}],"contextDependencies":[],"result":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(require('chart.js')) :\n\ttypeof define === 'function' && define.amd ? define(['chart.js'], factory) :\n\t(factory(global.Chart));\n}(this, (function (Chart) { 'use strict';\n\nChart = Chart && Chart.hasOwnProperty('default') ? Chart['default'] : Chart;\n\n/**\r\n * @module Options\r\n */\r\n\r\n'use strict';\r\n\r\nvar defaults = {\r\n\t/**\r\n\t * The font options used to draw the label text.\r\n\t * @member {Object|Array|Function}\r\n\t * @prop {String} font.family - defaults to Chart.defaults.global.defaultFontFamily\r\n\t * @prop {Number} font.lineHeight - defaults to 1.2\r\n\t * @prop {Number} font.size - defaults to Chart.defaults.global.defaultFontSize\r\n\t * @prop {String} font.style - defaults to Chart.defaults.global.defaultFontStyle\r\n\t * @prop {Number} font.weight - defaults to 'normal'\r\n\t * @default Chart.defaults.global.defaultFont.*\r\n\t */\r\n\tfont: {\r\n\t\tfamily: undefined,\r\n\t\tlineHeight: 1.2,\r\n\t\tsize: undefined,\r\n\t\tstyle: undefined,\r\n\t\tweight: null\r\n\t}\r\n};\n\n'use strict';\r\n\r\nvar helpers$1 = Chart.helpers;\r\n\r\nvar utils = {\r\n\r\n\tparseFont: function(value) {\r\n\t\tvar global = Chart.defaults.global;\r\n\t\tvar size = helpers$1.valueOrDefault(value.size, global.defaultFontSize);\r\n\t\tvar font = {\r\n\t\t\tfamily: helpers$1.valueOrDefault(value.family, global.defaultFontFamily),\r\n\t\t\tlineHeight: helpers$1.options.toLineHeight(value.lineHeight, size),\r\n\t\t\tsize: size,\r\n\t\t\tstyle: helpers$1.valueOrDefault(value.style, global.defaultFontStyle),\r\n\t\t\tweight: helpers$1.valueOrDefault(value.weight, null),\r\n\t\t\tstring: ''\r\n\t\t};\r\n\r\n\t\tfont.string = utils.toFontString(font);\r\n\t\treturn font;\r\n\t},\r\n\r\n\ttoFontString: function(font) {\r\n\t\tif (!font || helpers$1.isNullOrUndef(font.size) || helpers$1.isNullOrUndef(font.family)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn (font.style ? font.style + ' ' : '')\r\n\t\t\t+ (font.weight ? font.weight + ' ' : '')\r\n\t\t\t+ font.size + 'px '\r\n\t\t\t+ font.family;\r\n\t},\r\n\r\n\ttextSize: function(ctx, labels) {\r\n\t\tvar items = [].concat(labels);\r\n\t\tvar ilen = items.length;\r\n\t\tvar prev = ctx.font;\r\n\t\tvar width = 0;\r\n\t\tvar height = 0;\r\n\t\tvar i;\r\n\r\n\t\tfor (i = 0; i < ilen; ++i) {\r\n\t\t\tctx.font = items[i].font.string;\r\n\t\t\twidth = Math.max(ctx.measureText(items[i].text).width, width);\r\n\t\t\theight += items[i].font.lineHeight;\r\n\t\t}\r\n\r\n\t\tctx.font = prev;\r\n\r\n\t\tvar result = {\r\n\t\t\theight: height,\r\n\t\t\twidth: width\r\n\t\t};\r\n\t\treturn result;\r\n\t}\r\n\r\n};\n\n'use strict';\r\n\r\nvar helpers = Chart.helpers;\r\n\r\nChart.defaults.global.plugins.doughnutlabel = defaults;\r\n\r\nfunction drawDoughnutLabel(chart, options) {\r\n\tif (options && options.labels && options.labels.length > 0) {\r\n\t\tvar ctx = chart.ctx;\r\n\t\tvar resolve = helpers.options.resolve;\r\n\r\n\t\tvar innerLabels = [];\r\n\t\toptions.labels.forEach(function(label) {\r\n\t\t\tvar text = typeof(label.text) === 'function' ? label.text(chart) : label.text;\r\n\t\t\tvar innerLabel = {\r\n\t\t\t\ttext: text,\r\n\t\t\t\tfont: utils.parseFont(resolve([label.font, options.font, {}], ctx, 0)),\r\n\t\t\t\tcolor: resolve([label.color, options.color, Chart.defaults.global.defaultFontColor], ctx, 0)\r\n\t\t\t};\r\n\t\t\tinnerLabels.push(innerLabel);\r\n\t\t});\r\n\r\n\t\tvar textAreaSize = utils.textSize(ctx, innerLabels);\r\n\r\n\t\t// Calculate the adjustment ratio to fit the text area into the doughnut inner circle\r\n\t\tvar hypotenuse = Math.sqrt(Math.pow(textAreaSize.width, 2) + Math.pow(textAreaSize.height, 2));\r\n\t\tvar innerDiameter = chart.innerRadius * 2;\r\n\t\tvar fitRatio = innerDiameter / hypotenuse;\r\n\r\n\t\t// Adjust the font if necessary and recalculate the text area after applying the fit ratio\r\n\t\tif (fitRatio < 1) {\r\n\t\t\tinnerLabels.forEach(function(innerLabel) {\r\n\t\t\t\tinnerLabel.font.size = Math.floor(innerLabel.font.size * fitRatio);\r\n\t\t\t\tinnerLabel.font.lineHeight = undefined;\r\n\t\t\t\tinnerLabel.font = utils.parseFont(resolve([innerLabel.font, {}], ctx, 0));\r\n\t\t\t});\r\n\r\n\t\t\ttextAreaSize = utils.textSize(ctx, innerLabels);\r\n\t\t}\r\n\r\n\t\tctx.textAlign = 'center';\r\n\t\tctx.textBaseline = 'middle';\r\n\r\n\t\t// The center of the inner circle\r\n\t\tvar centerX = ((chart.chartArea.left + chart.chartArea.right) / 2);\r\n\t\tvar centerY = ((chart.chartArea.top + chart.chartArea.bottom) / 2);\r\n\r\n\t\t// The top Y coordinate of the text area\r\n\t\tvar topY = centerY - textAreaSize.height / 2;\r\n\r\n\t\tvar i;\r\n\t\tvar ilen = innerLabels.length;\r\n\t\tvar currentHeight = 0;\r\n\t\tfor (i = 0; i < ilen; ++i) {\r\n\t\t\tctx.fillStyle = innerLabels[i].color;\r\n\t\t\tctx.font = innerLabels[i].font.string;\r\n\r\n\t\t\t// The Y center of each line\r\n\t\t\tvar lineCenterY = topY + innerLabels[i].font.lineHeight / 2 + currentHeight;\r\n\t\t\tcurrentHeight += innerLabels[i].font.lineHeight;\r\n\r\n\t\t\t// Draw each line of text\r\n\t\t\tctx.fillText(innerLabels[i].text, centerX, lineCenterY);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nChart.plugins.register({\r\n\tid: 'doughnutlabel',\r\n\tbeforeDatasetDraw: function(chart, args, options) {\r\n\t\tdrawDoughnutLabel(chart, options);\r\n\t}\r\n});\n\n})));\n",null]}