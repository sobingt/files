{"remainingRequest":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/html-to-image/lib/embedImages.js","dependencies":[{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/html-to-image/lib/embedImages.js","mtime":1596454950000},{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/cache-loader/dist/cjs.js","mtime":1596454942000},{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1596454940000}],"contextDependencies":[],"result":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils_1 = require(\"./utils\");\nvar getBlobFromURL_1 = __importDefault(require(\"./getBlobFromURL\"));\nvar embedResources_1 = __importDefault(require(\"./embedResources\"));\nfunction embedBackground(clonedNode, options) {\n    var background = clonedNode.style.getPropertyValue('background');\n    if (!background) {\n        return Promise.resolve(clonedNode);\n    }\n    return Promise.resolve(background)\n        .then(function (cssString) { return embedResources_1.default(cssString, null, options); })\n        .then(function (cssString) {\n        clonedNode.style.setProperty('background', cssString, clonedNode.style.getPropertyPriority('background'));\n        return clonedNode;\n    });\n}\nfunction embedImageNode(clonedNode, options) {\n    if (!(clonedNode instanceof HTMLImageElement) || utils_1.isDataUrl(clonedNode.src)) {\n        return Promise.resolve(clonedNode);\n    }\n    return Promise.resolve(clonedNode.src)\n        .then(function (url) { return getBlobFromURL_1.default(url, options); })\n        .then(function (data) { return utils_1.toDataURL(data, utils_1.getMimeType(clonedNode.src)); })\n        .then(function (dataURL) { return new Promise((function (resolve, reject) {\n        clonedNode.onload = resolve;\n        clonedNode.onerror = reject;\n        clonedNode.src = dataURL;\n    })); })\n        .then(function () { return clonedNode; }, function () { return clonedNode; });\n}\nfunction embedChildren(clonedNode, options) {\n    var children = utils_1.toArray(clonedNode.childNodes);\n    var deferreds = children.map(function (child) { return embedImages(child, options); });\n    return Promise.all(deferreds).then(function () { return clonedNode; });\n}\nfunction embedImages(clonedNode, options) {\n    if (!(clonedNode instanceof Element)) {\n        return Promise.resolve(clonedNode);\n    }\n    return Promise.resolve(clonedNode)\n        .then(function (node) { return embedBackground(node, options); })\n        .then(function (node) { return embedImageNode(node, options); })\n        .then(function (node) { return embedChildren(node, options); });\n}\nexports.default = embedImages;\n",null]}