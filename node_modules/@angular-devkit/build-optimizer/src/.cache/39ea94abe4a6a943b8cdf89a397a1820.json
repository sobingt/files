{"remainingRequest":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/ngx-typeahead/esm5/ngx-typeahead.js","dependencies":[{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/ngx-typeahead/esm5/ngx-typeahead.js","mtime":1596454950000},{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/cache-loader/dist/cjs.js","mtime":1596454942000},{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1596454940000}],"contextDependencies":[],"result":["/**\n * @license ngx-typeahead\n * MIT license\n */\nimport { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostListener, Input, NgModule, Output, ViewChild, ViewContainerRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClient, HttpClientJsonpModule, HttpClientModule, HttpParams } from '@angular/common/http';\nimport { Subject, of } from 'rxjs';\nimport { concat, debounceTime, distinctUntilChanged, filter, map, switchMap, tap } from 'rxjs/operators';\nimport { __assign } from 'tslib';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @enum {number} */\nvar Key = /*@__PURE__*/ (function () {\n    var Key = {\n        Backspace: 8,\n        Tab: 9,\n        Enter: 13,\n        Shift: 16,\n        Escape: 27,\n        ArrowLeft: 37,\n        ArrowRight: 39,\n        ArrowUp: 38,\n        ArrowDown: 40,\n        // http://unixpapa.com/js/key.html\n        MacCommandLeft: 91,\n        MacCommandRight: 93,\n        MacCommandFirefox: 224,\n    };\n    Key[Key.Backspace] = \"Backspace\";\n    Key[Key.Tab] = \"Tab\";\n    Key[Key.Enter] = \"Enter\";\n    Key[Key.Shift] = \"Shift\";\n    Key[Key.Escape] = \"Escape\";\n    Key[Key.ArrowLeft] = \"ArrowLeft\";\n    Key[Key.ArrowRight] = \"ArrowRight\";\n    Key[Key.ArrowUp] = \"ArrowUp\";\n    Key[Key.ArrowDown] = \"ArrowDown\";\n    Key[Key.MacCommandLeft] = \"MacCommandLeft\";\n    Key[Key.MacCommandRight] = \"MacCommandRight\";\n    Key[Key.MacCommandFirefox] = \"MacCommandFirefox\";\n    return Key;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} keyCode\n * @return {?}\n */\nfunction validateNonCharKeyCode(keyCode) {\n    return [\n        Key.Enter,\n        Key.Tab,\n        Key.Shift,\n        Key.ArrowLeft,\n        Key.ArrowUp,\n        Key.ArrowRight,\n        Key.ArrowDown,\n        Key.MacCommandLeft,\n        Key.MacCommandRight,\n        Key.MacCommandFirefox\n    ].every(function (codeKey) { return codeKey !== keyCode; });\n}\n/**\n * @param {?} keyCode\n * @return {?}\n */\nfunction validateArrowKeys(keyCode) {\n    return keyCode === Key.ArrowDown || keyCode === Key.ArrowUp;\n}\n/**\n * @param {?} index\n * @param {?} currentIndex\n * @return {?}\n */\nfunction isIndexActive(index, currentIndex) {\n    return index === currentIndex;\n}\n/**\n * @param {?} event\n * @return {?}\n */\nfunction isEnterKey(event) {\n    return event.keyCode === Key.Enter;\n}\n/**\n * @param {?} event\n * @return {?}\n */\nfunction isEscapeKey(event) {\n    return event.keyCode === Key.Escape;\n}\n/**\n * @param {?} query\n * @param {?=} queryParamKey\n * @param {?=} customParams\n * @return {?}\n */\nfunction createParamsForQuery(query, queryParamKey, customParams) {\n    if (queryParamKey === void 0) {\n        queryParamKey = 'q';\n    }\n    if (customParams === void 0) {\n        customParams = {};\n    }\n    var /** @type {?} */ searchParams = __assign((_a = {}, _a[queryParamKey] = query, _a), customParams);\n    // tslint:disable-next-line\n    var /** @type {?} */ setParam = function (acc, param) {\n        return acc.set(param, searchParams[param]);\n    };\n    var /** @type {?} */ params = Object.keys(searchParams).reduce(setParam, new HttpParams());\n    return params;\n    var _a;\n}\n/**\n * @param {?=} method\n * @return {?}\n */\nfunction resolveApiMethod(method) {\n    if (method === void 0) {\n        method = '';\n    }\n    var /** @type {?} */ isMethodValid = [\n        'get',\n        'post',\n        'put',\n        'delete',\n        'patch',\n        'request'\n    ].some(function (methodName) { return method === methodName; });\n    var /** @type {?} */ apiMethod = isMethodValid ? method : 'get';\n    return apiMethod;\n}\nvar NO_INDEX = -1;\n/**\n * @param {?} currentIndex\n * @param {?} stepUp\n * @param {?=} listLength\n * @return {?}\n */\nfunction resolveNextIndex(currentIndex, stepUp, listLength) {\n    if (listLength === void 0) {\n        listLength = 10;\n    }\n    var /** @type {?} */ step = stepUp ? 1 : -1;\n    var /** @type {?} */ topLimit = listLength - 1;\n    var /** @type {?} */ bottomLimit = NO_INDEX;\n    var /** @type {?} */ currentResultIndex = currentIndex + step;\n    var /** @type {?} */ resultIndex = currentResultIndex;\n    if (currentResultIndex === topLimit + 1) {\n        resultIndex = bottomLimit;\n    }\n    if (currentResultIndex === bottomLimit - 1) {\n        resultIndex = topLimit;\n    }\n    return resultIndex;\n}\n/**\n * @param {?} response\n * @return {?}\n */\nfunction toJsonpSingleResult(response) {\n    return response[1];\n}\n/**\n * @param {?} results\n * @return {?}\n */\nfunction toJsonpFinalResults(results) {\n    return results.map(function (result) { return result[0]; });\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction hasCharacters(query) {\n    return query.length > 0;\n}\n/**\n * @param {?} e\n * @return {?}\n */\nfunction toFormControlValue(e) {\n    return e.target.value;\n}\n/**\n * @param {?} item\n * @param {?} fieldsToExtract\n * @param {?=} caseSensitive\n * @return {?}\n */\nfunction resolveItemValue(item, fieldsToExtract, caseSensitive) {\n    if (caseSensitive === void 0) {\n        caseSensitive = false;\n    }\n    var /** @type {?} */ newItem = item;\n    if (!item.hasOwnProperty('length')) {\n        var /** @type {?} */ fields = !fieldsToExtract.length\n            ? Object.keys(item)\n            : fieldsToExtract;\n        newItem = fields.reduce(function (acc, cur) { return \"\" + acc + item[cur]; }, '');\n    }\n    return caseSensitive ? newItem : newItem.toLowerCase();\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxTypeAheadComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NgxTypeAheadComponent(element, viewContainer, http$$1, cdr) {\n        this.element = element;\n        this.viewContainer = viewContainer;\n        this.http = http$$1;\n        this.cdr = cdr;\n        this.showSuggestions = false;\n        this.results = [];\n        this.taUrl = '';\n        this.taParams = {};\n        this.taQueryParam = 'q';\n        this.taApi = 'jsonp';\n        this.taApiMethod = 'get';\n        this.taList = [];\n        this.taListItemField = [];\n        this.taListItemLabel = '';\n        this.taDebounce = 300;\n        this.taAllowEmpty = false;\n        this.taCaseSensitive = false;\n        this.taDisplayOnFocus = false;\n        this.taSelected = new EventEmitter();\n        this.suggestionIndex = 0;\n        this.subscriptions = [];\n        this.activeResult = '';\n        this.searchQuery = '';\n        this.selectedItem = {};\n        this.resultsAsItems = [];\n        this.keydown$ = new Subject();\n        this.keyup$ = new Subject();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NgxTypeAheadComponent.prototype.handleEsc = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            if (isEscapeKey(event)) {\n                this.hideSuggestions();\n                event.preventDefault();\n            }\n            this.keydown$.next(event);\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NgxTypeAheadComponent.prototype.onkeyup = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.keyup$.next(event);\n        };\n    /**\n     * @return {?}\n     */\n    NgxTypeAheadComponent.prototype.onClick = /**\n     * @return {?}\n     */\n        function () {\n            if (this.taDisplayOnFocus) {\n                this.displaySuggestions();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NgxTypeAheadComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.filterEnterEvent(this.keydown$);\n            this.listenAndSuggest(this.keyup$);\n            this.navigateWithArrows(this.keydown$);\n            this.renderTemplate();\n        };\n    /**\n     * @return {?}\n     */\n    NgxTypeAheadComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.keydown$.complete();\n            this.keyup$.complete();\n        };\n    /**\n     * @return {?}\n     */\n    NgxTypeAheadComponent.prototype.renderTemplate = /**\n     * @return {?}\n     */\n        function () {\n            this.viewContainer.createEmbeddedView(this.suggestionsTplRef);\n            this.cdr.markForCheck();\n        };\n    /**\n     * @param {?} obs\n     * @return {?}\n     */\n    NgxTypeAheadComponent.prototype.listenAndSuggest = /**\n     * @param {?} obs\n     * @return {?}\n     */\n        function (obs) {\n            var _this = this;\n            obs\n                .pipe(filter(function (e) { return validateNonCharKeyCode(e.keyCode); }), map(toFormControlValue), debounceTime(this.taDebounce), concat(), distinctUntilChanged(), filter(function (query) { return _this.taAllowEmpty || hasCharacters(query); }), tap(function (query) { return (_this.searchQuery = query); }), switchMap(function (query) { return _this.suggest(query); }))\n                .subscribe(function (results) {\n                _this.assignResults(results);\n                // this.updateIndex(Key.ArrowDown);\n                // this.updateIndex(Key.ArrowDown);\n                _this.displaySuggestions();\n            });\n        };\n    /**\n     * @param {?} results\n     * @return {?}\n     */\n    NgxTypeAheadComponent.prototype.assignResults = /**\n     * @param {?} results\n     * @return {?}\n     */\n        function (results) {\n            var /** @type {?} */ labelForDisplay = this.taListItemLabel;\n            this.resultsAsItems = results;\n            this.results = results.map(function (item) { return (labelForDisplay ? item[labelForDisplay] : item); });\n            this.suggestionIndex = NO_INDEX;\n            if (!results || !results.length) {\n                this.activeResult = this.searchQuery;\n            }\n        };\n    /**\n     * @param {?} elementObs\n     * @return {?}\n     */\n    NgxTypeAheadComponent.prototype.filterEnterEvent = /**\n     * @param {?} elementObs\n     * @return {?}\n     */\n        function (elementObs) {\n            var _this = this;\n            elementObs.pipe(filter(isEnterKey)).subscribe(function (event) {\n                _this.handleSelectSuggestion(_this.activeResult);\n            });\n        };\n    /**\n     * @param {?} elementObs\n     * @return {?}\n     */\n    NgxTypeAheadComponent.prototype.navigateWithArrows = /**\n     * @param {?} elementObs\n     * @return {?}\n     */\n        function (elementObs) {\n            var _this = this;\n            elementObs\n                .pipe(filter(function (e) { return validateArrowKeys(e.keyCode); }), map(function (e) { return e.keyCode; }))\n                .subscribe(function (keyCode) {\n                _this.updateIndex(keyCode);\n                _this.displaySuggestions();\n            });\n        };\n    /**\n     * @param {?} keyCode\n     * @return {?}\n     */\n    NgxTypeAheadComponent.prototype.updateIndex = /**\n     * @param {?} keyCode\n     * @return {?}\n     */\n        function (keyCode) {\n            this.suggestionIndex = resolveNextIndex(this.suggestionIndex, keyCode === Key.ArrowDown, this.results.length);\n        };\n    /**\n     * @return {?}\n     */\n    NgxTypeAheadComponent.prototype.displaySuggestions = /**\n     * @return {?}\n     */\n        function () {\n            this.showSuggestions = true;\n            this.cdr.markForCheck();\n        };\n    /**\n     * @param {?} query\n     * @return {?}\n     */\n    NgxTypeAheadComponent.prototype.suggest = /**\n     * @param {?} query\n     * @return {?}\n     */\n        function (query) {\n            return this.taList.length\n                ? this.createListSource(this.taList, query)\n                : this.request(query);\n        };\n    /**\n     * peforms a jsonp/http request to search with query and params\n     * @param query the query to search from the remote source\n     */\n    /**\n     * peforms a jsonp/http request to search with query and params\n     * @param {?} query the query to search from the remote source\n     * @return {?}\n     */\n    NgxTypeAheadComponent.prototype.request = /**\n     * peforms a jsonp/http request to search with query and params\n     * @param {?} query the query to search from the remote source\n     * @return {?}\n     */\n        function (query) {\n            var /** @type {?} */ url = this.taUrl;\n            var /** @type {?} */ searchConfig = createParamsForQuery(query, this.taQueryParam, this.taParams);\n            var /** @type {?} */ options = {\n                params: searchConfig\n            };\n            var /** @type {?} */ isJsonpApi = this.taApi === 'jsonp';\n            return isJsonpApi\n                ? this.requestJsonp(url, options, this.taCallbackParamValue)\n                : this.requestHttp(url, options);\n        };\n    /**\n     * @param {?} url\n     * @param {?} options\n     * @return {?}\n     */\n    NgxTypeAheadComponent.prototype.requestHttp = /**\n     * @param {?} url\n     * @param {?} options\n     * @return {?}\n     */\n        function (url, options) {\n            var /** @type {?} */ apiMethod = resolveApiMethod(this.taApiMethod);\n            return this.http[apiMethod](url, options);\n        };\n    /**\n     * @param {?} url\n     * @param {?} options\n     * @param {?=} callback\n     * @return {?}\n     */\n    NgxTypeAheadComponent.prototype.requestJsonp = /**\n     * @param {?} url\n     * @param {?} options\n     * @param {?=} callback\n     * @return {?}\n     */\n        function (url, options, callback) {\n            if (callback === void 0) {\n                callback = 'callback';\n            }\n            var /** @type {?} */ params = options.params.toString();\n            return this.http.jsonp(url + \"?\" + params, callback).pipe(map(toJsonpSingleResult), map(toJsonpFinalResults));\n        };\n    /**\n     * @param {?} index\n     * @param {?} result\n     * @return {?}\n     */\n    NgxTypeAheadComponent.prototype.markIsActive = /**\n     * @param {?} index\n     * @param {?} result\n     * @return {?}\n     */\n        function (index, result) {\n            var /** @type {?} */ isActive = isIndexActive(index, this.suggestionIndex);\n            if (isActive) {\n                this.activeResult = result;\n            }\n            return isActive;\n        };\n    /**\n     * @param {?} suggestion\n     * @param {?} index\n     * @return {?}\n     */\n    NgxTypeAheadComponent.prototype.handleSelectionClick = /**\n     * @param {?} suggestion\n     * @param {?} index\n     * @return {?}\n     */\n        function (suggestion, index) {\n            this.suggestionIndex = index;\n            this.handleSelectSuggestion(suggestion);\n        };\n    /**\n     * @param {?} suggestion\n     * @return {?}\n     */\n    NgxTypeAheadComponent.prototype.handleSelectSuggestion = /**\n     * @param {?} suggestion\n     * @return {?}\n     */\n        function (suggestion) {\n            var /** @type {?} */ result = this.resultsAsItems.length\n                ? this.resultsAsItems[this.suggestionIndex]\n                : suggestion;\n            this.hideSuggestions();\n            var /** @type {?} */ resolvedResult = this.suggestionIndex === NO_INDEX ? this.searchQuery : result;\n            this.taSelected.emit(resolvedResult);\n        };\n    /**\n     * @return {?}\n     */\n    NgxTypeAheadComponent.prototype.hideSuggestions = /**\n     * @return {?}\n     */\n        function () {\n            this.showSuggestions = false;\n        };\n    /**\n     * @return {?}\n     */\n    NgxTypeAheadComponent.prototype.hasItemTemplate = /**\n     * @return {?}\n     */\n        function () {\n            return this.taItemTpl !== undefined;\n        };\n    /**\n     * @param {?} list\n     * @param {?} query\n     * @return {?}\n     */\n    NgxTypeAheadComponent.prototype.createListSource = /**\n     * @param {?} list\n     * @param {?} query\n     * @return {?}\n     */\n        function (list, query) {\n            var _this = this;\n            var /** @type {?} */ sanitizedQuery = this.taCaseSensitive ? query : query.toLowerCase();\n            var /** @type {?} */ fieldsToExtract = this.taListItemField;\n            return of(list.filter(function (item) {\n                return resolveItemValue(item, fieldsToExtract, _this.taCaseSensitive).includes(sanitizedQuery);\n            }));\n        };\n    return NgxTypeAheadComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxTypeaheadModule = /** @class */ /*@__PURE__*/ (function () {\n    function NgxTypeaheadModule() {\n    }\n    return NgxTypeaheadModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Angular library starter.\n * Build an Angular library compatible with AoT compilation & Tree shaking\n * Copyright Roberto Simonetti.\n * MIT license.\n * https://github.com/robisim74/angular-library-starter\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { NgxTypeaheadModule, NgxTypeAheadComponent as ɵa };\n//# sourceMappingURL=ngx-typeahead.js.map\n",null]}