{"remainingRequest":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/ng2-semantic-ui/dist/modules/modal/classes/modal-config.js","dependencies":[{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/ng2-semantic-ui/dist/modules/modal/classes/modal-config.js","mtime":1596454950000},{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/cache-loader/dist/cjs.js","mtime":1596454942000},{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1596454940000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\nexport var ModalSize = {\n    Mini: \"mini\",\n    Tiny: \"tiny\",\n    Small: \"small\",\n    Normal: \"normal\",\n    Large: \"large\"\n};\n// Stores a basic set of configuration options for a modal.\nvar \n// Stores a basic set of configuration options for a modal.\nModalConfig = /** @class */ (function () {\n    function ModalConfig(context, isClosable) {\n        if (context === void 0) {\n            context = undefined;\n        }\n        if (isClosable === void 0) {\n            isClosable = true;\n        }\n        // Initialise with default values.\n        this.isClosable = isClosable;\n        this.context = context;\n        this.size = ModalSize.Normal;\n        this.isFullScreen = false;\n        this.isBasic = false;\n        this.isInverted = false;\n        this.mustScroll = false;\n        this.transition = \"scale\";\n        this.transitionDuration = 500;\n    }\n    return ModalConfig;\n}());\n// Stores a basic set of configuration options for a modal.\nexport { ModalConfig };\n// Used when creating a modal from a `TemplateRef`.\nvar \n// Used when creating a modal from a `TemplateRef`.\nTemplateModalConfig = /** @class */ (function (_super) {\n    __extends(TemplateModalConfig, _super);\n    function TemplateModalConfig(template, context, isClosable) {\n        if (context === void 0) {\n            context = undefined;\n        }\n        if (isClosable === void 0) {\n            isClosable = true;\n        }\n        var _this = _super.call(this, context, isClosable) || this;\n        _this.template = template;\n        return _this;\n    }\n    return TemplateModalConfig;\n}(ModalConfig));\n// Used when creating a modal from a `TemplateRef`.\nexport { TemplateModalConfig };\n// Used when creating a modal from an existing component.\nvar \n// Used when creating a modal from an existing component.\nComponentModalConfig = /** @class */ (function (_super) {\n    __extends(ComponentModalConfig, _super);\n    function ComponentModalConfig(component, context, isClosable) {\n        if (context === void 0) {\n            context = undefined;\n        }\n        if (isClosable === void 0) {\n            isClosable = true;\n        }\n        var _this = _super.call(this, context, isClosable) || this;\n        _this.component = component;\n        return _this;\n    }\n    return ComponentModalConfig;\n}(ModalConfig));\n// Used when creating a modal from an existing component.\nexport { ComponentModalConfig };\n//# sourceMappingURL=modal-config.js.map\n",null]}