{"remainingRequest":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/ngx-extended-pdf-viewer/fesm5/ngx-extended-pdf-viewer.js","dependencies":[{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/ngx-extended-pdf-viewer/fesm5/ngx-extended-pdf-viewer.js","mtime":1596454948000},{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/cache-loader/dist/cjs.js","mtime":1596454942000},{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1596454940000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START lodash.deburr,_angular_common,_angular_core PURE_IMPORTS_END */\nimport * as deburr from 'lodash.deburr';\nimport { CommonModule } from '@angular/common';\nimport { Component, ViewEncapsulation, Input, Output, EventEmitter, ChangeDetectionStrategy, HostListener, NgZone, Injectable, ViewChild, NgModule, defineInjectable } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar _isIE11 = !!(( /** @type {?} */(window))).MSInputMethodContext && !!(( /** @type {?} */(document))).documentMode;\n/** @type {?} */\nvar defaultOptions = {\n    cursorToolOnLoad: 0,\n    defaultUrl: '',\n    defaultZoomValue: '',\n    disableHistory: false,\n    disablePageLabels: false,\n    enablePrintAutoRotate: false,\n    enableWebGL: false,\n    eventBusDispatchToDOM: false,\n    externalLinkRel: 'noopener noreferrer nofollow',\n    externalLinkTarget: 0,\n    historyUpdateUrl: false,\n    imageResourcesPath: './images/',\n    maxCanvasPixels: 16777216,\n    pdfBugEnabled: false,\n    removePageBorders: false,\n    renderer: 'canvas',\n    renderInteractiveForms: false,\n    sidebarViewOnLoad: -1,\n    scrollModeOnLoad: -1,\n    spreadModeOnLoad: -1,\n    textLayerMode: 1,\n    useOnlyCssZoom: false,\n    viewOnLoad: 0,\n    cMapPacked: true,\n    cMapUrl: '../web/cmaps/',\n    disableAutoFetch: false,\n    disableCreateObjectURL: false,\n    disableFontFace: false,\n    disableRange: false,\n    disableStream: false,\n    isEvalSupported: true,\n    maxImageSize: -1,\n    pdfBug: false,\n    postMessageTransfers: true,\n    verbosity: 1,\n    workerPort: null,\n    workerSrc: _isIE11 ? './assets/pdf.worker-es5.js' : './assets/pdf.worker.js'\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} width\n * @return {?}\n */\nfunction resizeUpTo535px(width) {\n    /** @type {?} */\n    var tinyElement = document.getElementById('scaleSelectContainer');\n    /** @type {?} */\n    var tiny = ( /** @type {?} */(tinyElement));\n    if (width < 535) {\n        // not perfect, but good first approximation\n        tiny.classList.add('hidden');\n    }\n    else {\n        tiny.classList.remove('hidden');\n    }\n}\n/**\n * @param {?} container\n * @param {?} width\n * @return {?}\n */\nfunction resizeUpTo640px(container, width) {\n    /** @type {?} */\n    var smallElements = container.getElementsByClassName('hiddenSmallView');\n    for (var i = 0; i < smallElements.length; i++) {\n        /** @type {?} */\n        var elt = ( /** @type {?} */(smallElements[i]));\n        if (width < 640) {\n            elt.classList.add('hidden');\n        }\n        else {\n            elt.classList.remove('hidden');\n        }\n    }\n    /** @type {?} */\n    var visibleSmallViewElements = container.getElementsByClassName('visibleSmallView');\n    for (var i = 0; i < visibleSmallViewElements.length; i++) {\n        /** @type {?} */\n        var elt = ( /** @type {?} */(visibleSmallViewElements[i]));\n        if (width < 640) {\n            elt.classList.remove('hidden');\n        }\n        else {\n            elt.classList.add('hidden');\n        }\n    }\n    /** @type {?} */\n    var toolbarButtonSpacer = container.getElementsByClassName('toolbarButtonSpacer');\n    for (var i = 0; i < toolbarButtonSpacer.length; i++) {\n        /** @type {?} */\n        var elt = ( /** @type {?} */(toolbarButtonSpacer[i]));\n        if (width < 640) {\n            elt.classList.add('below640px');\n        }\n        else {\n            elt.classList.remove('below640px');\n        }\n    }\n    /** @type {?} */\n    var findbar = document.getElementsByClassName('findbar');\n    for (var i = 0; i < findbar.length; i++) {\n        /** @type {?} */\n        var elt = ( /** @type {?} */(findbar[i]));\n        if (width < 640) {\n            elt.classList.add('below640px');\n        }\n        else {\n            elt.classList.remove('below640px');\n        }\n    }\n}\n/**\n * @param {?} container\n * @param {?} width\n * @return {?}\n */\nfunction resizeUpTo700px(container, width) {\n    /** @type {?} */\n    var mediumElements = container.getElementsByClassName('hiddenMediumView');\n    for (var i = 0; i < mediumElements.length; i++) {\n        /** @type {?} */\n        var elt = ( /** @type {?} */(mediumElements[i]));\n        if (width < 700) {\n            elt.classList.add('hidden');\n        }\n        else {\n            elt.classList.remove('hidden');\n        }\n    }\n    // #103\n    /** @type {?} */\n    var visibleMediumElements = container.getElementsByClassName('visibleMediumView');\n    for (var i = 0; i < visibleMediumElements.length; i++) {\n        /** @type {?} */\n        var elt = ( /** @type {?} */(visibleMediumElements[i]));\n        if (width < 700) {\n            elt.classList.remove('hidden');\n        }\n        else {\n            elt.classList.add('hidden');\n        }\n    }\n}\n/**\n * @param {?} width\n * @return {?}\n */\nfunction resizeUpTo900px(width) {\n    /** @type {?} */\n    var elt = document.getElementById('toolbarViewerMiddle');\n    if (elt) {\n        if (width < 900) {\n            elt.classList.add('toolbarViewerMiddleBelow900px');\n        }\n        else {\n            elt.classList.remove('toolbarViewerMiddleBelow900px');\n        }\n    }\n}\n/**\n * @param {?} width\n * @return {?}\n */\nfunction resizeUpTo840px(width) {\n    /** @type {?} */\n    var elt = document.getElementsByClassName('zoom')[0];\n    if (elt) {\n        if (width < 840) {\n            elt.classList.add('below840px');\n        }\n        else {\n            elt.classList.remove('below840px');\n        }\n    }\n}\n/**\n * @param {?} container\n * @param {?} width\n * @return {?}\n */\nfunction resizeUpTo770px(container, width) {\n    /** @type {?} */\n    var elt = document.getElementsByClassName('zoom')[0];\n    if (elt) {\n        if (width < 770) {\n            elt.classList.add('below770px');\n        }\n        else {\n            elt.classList.remove('below770px');\n        }\n    }\n    /** @type {?} */\n    var hiddenLargeElements = container.getElementsByClassName('hiddenLargeView');\n    for (var i = 0; i < hiddenLargeElements.length; i++) {\n        elt = ( /** @type {?} */(hiddenLargeElements[i]));\n        if (width < 770) {\n            elt.classList.add('hidden');\n        }\n        else {\n            elt.classList.remove('hidden');\n        }\n    }\n    /** @type {?} */\n    var visibleLargeElements = container.getElementsByClassName('visibleLargeView');\n    for (var i = 0; i < visibleLargeElements.length; i++) {\n        elt = ( /** @type {?} */(visibleLargeElements[i]));\n        if (width < 770) {\n            elt.classList.remove('hidden');\n        }\n        else {\n            elt.classList.add('hidden');\n        }\n    }\n}\n/**\n * @return {?}\n */\nfunction removeDynamicCSS() {\n    /** @type {?} */\n    var classesToRemove = ['toolbarViewerMiddleBelow900px', 'below840px', 'below770px', 'below700px', 'below640px'];\n    /** @type {?} */\n    var elt = document.getElementsByClassName('zoom')[0];\n    if (elt) {\n        classesToRemove.forEach(( /**\n         * @param {?} c\n         * @return {?}\n         */function (c) {\n            /** @type {?} */\n            var parents = elt.getElementsByClassName(c);\n            if (parents) {\n                for (var i = 0; i < parents.length; i++) {\n                    /** @type {?} */\n                    var element = parents.item(i);\n                    if (element) {\n                        element.classList.remove(c);\n                    }\n                }\n            }\n        }));\n        /** @type {?} */\n        var tinyElement = document.getElementById('scaleSelectContainer');\n        if (tinyElement) {\n            tinyElement.classList.remove('hidden');\n        }\n        /** @type {?} */\n        var classesToRemoveHiddenFrom = [\n            'hiddenSmallView',\n            'visibleSmallView',\n            'hiddenMediumView',\n            'visibleMediumView',\n            'hiddenLargeView',\n            'visibleLargeView'\n        ];\n        classesToRemoveHiddenFrom.forEach(( /**\n         * @param {?} c\n         * @return {?}\n         */function (c) {\n            /** @type {?} */\n            var parents = elt.getElementsByClassName(c);\n            if (parents) {\n                for (var i = 0; i < parents.length; i++) {\n                    /** @type {?} */\n                    var element = parents.item(i);\n                    if (element) {\n                        element.classList.remove('hidden');\n                    }\n                }\n            }\n        }));\n    }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar ServiceWorkerOptions = {\n    showUnverifiedSignatures: false\n};\n(( /** @type {?} */(window))).ServiceWorkerOptions = ServiceWorkerOptions;\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nvar VerbosityLevel = /*@__PURE__*/ (function () {\n    var VerbosityLevel = {\n        ERRORS: 0,\n        WARNINGS: 1,\n        INFOS: 5,\n    };\n    VerbosityLevel[VerbosityLevel.ERRORS] = 'ERRORS';\n    VerbosityLevel[VerbosityLevel.WARNINGS] = 'WARNINGS';\n    VerbosityLevel[VerbosityLevel.INFOS] = 'INFOS';\n    return VerbosityLevel;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nvar FindState = /*@__PURE__*/ (function () {\n    var FindState = {\n        FOUND: 0,\n        NOT_FOUND: 1,\n        WRAPPED: 2,\n        PENDING: 3,\n    };\n    FindState[FindState.FOUND] = 'FOUND';\n    FindState[FindState.NOT_FOUND] = 'NOT_FOUND';\n    FindState[FindState.WRAPPED] = 'WRAPPED';\n    FindState[FindState.PENDING] = 'PENDING';\n    return FindState;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n(( /** @type {?} */(window))).deburr = deburr; // #177\n// #177\nvar NgxExtendedPdfViewerComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NgxExtendedPdfViewerComponent(ngZone) {\n        this.ngZone = ngZone;\n        this.srcChange = new EventEmitter();\n        this.resizeTimeout = null;\n        this.contextMenuAllowed = true;\n        this.afterPrint = new EventEmitter();\n        this.beforePrint = new EventEmitter();\n        this.currentZoomFactor = new EventEmitter();\n        /**\n         * Number of milliseconds to wait between initializing the PDF viewer and loading the PDF file.\n         * Most users can let this parameter safely at it's default value of zero.\n         * Set this to 1000 or higher if you run into timing problems (typically caused by loading the locale files\n         * after the PDF files, so they are not available when the PDF viewer is initialized).\n         */\n        this.delayFirstView = 0;\n        this.ignoreResponsiveCSS = undefined;\n        /**\n         * How many log messages should be printed?\n         * Legal values: VerbosityLevel.INFOS (= 5), VerbosityLevel.WARNINGS (= 1), VerbosityLevel.ERRORS (= 0)\n         */\n        this.logLevel = VerbosityLevel.WARNINGS;\n        this.primaryMenuVisible = true;\n        /**\n         * option to increase (or reduce) print resolution. Default is 150 (dpi). Sensible values\n         * are 300, 600, and 1200. Note the increase memory consumption, which may even result in a browser crash.\n         */\n        this.printResolution = null;\n        this.rotationChange = new EventEmitter();\n        this.minHeight = undefined;\n        this._height = '100%';\n        /**\n         * If this flag is true, this components adds a link to the locale assets. The pdf viewer\n         * sees this link and uses it to load the locale files automatically.\n         * @param useBrowserLocale boolean\n         */\n        this.useBrowserLocale = false;\n        this.backgroundColor = '#e8e8eb';\n        /**\n         * Allows the user to define the name of the file after clicking \"download\"\n         */\n        this.filenameForDownload = 'document.pdf';\n        /**\n         * Allows the user to disable the keyboard bindings completely\n         */\n        this.ignoreKeyboard = false;\n        /**\n         * Allows the user to disable a list of key bindings.\n         */\n        this.ignoreKeys = [];\n        /**\n         * Allows the user to explicitely enable a list of key bindings. If this property is set, every other key binding is ignored.\n         */\n        this.acceptKeys = [];\n        /**\n         * Allows the user to put the viewer's svg images into an arbitrary folder\n         */\n        this.imageResourcesPath = './assets/images/';\n        /**\n         * Override the default locale. This must be the complete locale name, such as \"es-ES\". The string is allowed to be all lowercase.\n         */\n        this.language = undefined;\n        /**\n         * By default, listening to the URL is deactivated because often the anchor tag is used for the Angular router\n         */\n        this.listenToURL = false;\n        /**\n         * Navigate to a certain \"named destination\"\n         */\n        this.nameddest = undefined;\n        /**\n         * allows you to pass a password to read password-protected files\n         */\n        this.password = undefined;\n        this._showSidebarButton = true;\n        this.viewerPositionTop = '32px';\n        /**\n         * pdf.js can show signatures, but fails to verify them. So they are switched off by default.\n         * Set \"[showUnverifiedSignatures]\"=\"true\" to display e-signatures nonetheless.\n         */\n        this.showUnverifiedSignatures = false;\n        /**\n         * If [showSideBarButton]=\"true\", do you want the sidebar to be shown by default ([showSidebarOnLoad])=\"true\")\n         * or not? By default, this flag is undefined, telling the PDF viewer to use the last setting used with this particular\n         * document, or to hide the sidebar if the document is opened for the first time.\n         * @deprecated Use showSidebar instead; dreprecated since 1.8.0; to be removed with 2.0.0\n         */\n        this.showSidebarOnLoad = undefined;\n        this.sidebarVisible = undefined;\n        this.sidebarVisibleChange = new EventEmitter();\n        this.showFindButton = undefined;\n        this.showPagingButtons = true;\n        this.showZoomButtons = true;\n        this.showPresentationModeButton = false;\n        this.showOpenFileButton = true;\n        this.showPrintButton = true;\n        this.showDownloadButton = true;\n        this.showBookmarkButton = true;\n        this.showSecondaryToolbarButton = true;\n        this.showRotateButton = true;\n        this.handTool = true;\n        this.handToolChange = new EventEmitter();\n        this.showHandToolButton = false;\n        this.showScrollingButton = true;\n        this.showSpreadButton = true;\n        this.showPropertiesButton = true;\n        this.showBorders = false;\n        this.spreadChange = new EventEmitter();\n        this.page = undefined;\n        this.pageChange = new EventEmitter();\n        this.pageLabel = undefined;\n        this.pageLabelChange = new EventEmitter();\n        this.pagesLoaded = new EventEmitter();\n        this.pageRendered = new EventEmitter();\n        this.pdfDownloaded = new EventEmitter();\n        this.pdfLoaded = new EventEmitter();\n        this.pdfLoadingFailed = new EventEmitter();\n        this.textLayer = undefined;\n        this.updateFindMatchesCount = new EventEmitter();\n        this.updateFindState = new EventEmitter();\n        /**\n         * Legal values: undefined, 'auto', 'page-actual', 'page_fit', 'page-width', or '50' (or any other percentage)\n         */\n        this.zoom = undefined;\n        this.zoomChange = new EventEmitter();\n        /**\n         * This attributes allows you to increase the size of the UI elements so you can use them on small mobile devices.\n         * This attribute is a string with a percent character at the end (e.g. \"150%\").\n         */\n        this._mobileFriendlyZoom = '100%';\n        this.mobileFriendlyZoomScale = 1;\n        this.toolbarWidth = '100%';\n        this.secondaryToolbarTop = undefined;\n        // dirty IE11 hack - temporary solution\n        this.findbarTop = undefined;\n        // dirty IE11 hack - temporary solution\n        this.findbarLeft = undefined;\n        this._top = undefined;\n        if (!window['pdfjs-dist/build/pdf']) {\n            /** @type {?} */\n            var isIE = !!(( /** @type {?} */(window))).MSInputMethodContext && !!(( /** @type {?} */(document))).documentMode;\n            /** @type {?} */\n            var script = document.createElement('script');\n            script.src = isIE ? 'assets/pdf-es5.js' : 'assets/pdf.js';\n            script.type = 'text/javascript';\n            script.async = true;\n            document.getElementsByTagName('head')[0].appendChild(script);\n        }\n        if (!(( /** @type {?} */(window))).webViewerLoad) {\n            this.loadViewer();\n        }\n    }\n    Object.defineProperty(NgxExtendedPdfViewerComponent.prototype, \"src\", {\n        set: /**\n         * @param {?} url\n         * @return {?}\n         */ function (url) {\n            if (url instanceof Uint8Array) {\n                this._src = url.buffer;\n            }\n            else if (url instanceof Blob) {\n                this._src = URL.createObjectURL(url);\n            }\n            else if (typeof url === 'string') {\n                this._src = url;\n                if (url.length > 980) {\n                    // minimal length of a base64 encoded PDF\n                    if (url.length % 4 === 0) {\n                        if (/^[a-zA-Z\\d\\/+]+={0,2}$/.test(url)) {\n                            console.error('The URL looks like a base64 encoded string. If so, please use the attribute base64 instead of src');\n                        }\n                    }\n                }\n            }\n            else {\n                this._src = url;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxExtendedPdfViewerComponent.prototype, \"base64Src\", {\n        set: /**\n         * @param {?} base64\n         * @return {?}\n         */ function (base64) {\n            /** @type {?} */\n            var binary_string = window.atob(base64);\n            /** @type {?} */\n            var len = binary_string.length;\n            /** @type {?} */\n            var bytes = new Uint8Array(len);\n            for (var i = 0; i < len; i++) {\n                bytes[i] = binary_string.charCodeAt(i);\n            }\n            this.src = bytes.buffer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxExtendedPdfViewerComponent.prototype, \"height\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._height;\n        },\n        set: /**\n         * @param {?} h\n         * @return {?}\n         */ function (h) {\n            var _this = this;\n            this.minHeight = undefined;\n            if (h) {\n                this._height = h;\n            }\n            else {\n                this.height = '100%';\n            }\n            setTimeout(( /**\n             * @return {?}\n             */function () {\n                _this.checkHeight();\n            }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxExtendedPdfViewerComponent.prototype, \"showSidebarButton\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._showSidebarButton;\n        },\n        set: /**\n         * @param {?} show\n         * @return {?}\n         */ function (show) {\n            this._showSidebarButton = show;\n            /** @type {?} */\n            var isIE = /msie\\s|trident\\//i.test(window.navigator.userAgent);\n            /** @type {?} */\n            var factor = 1;\n            if (isIE) {\n                factor = Number((this._mobileFriendlyZoom || '100').replace('%', '')) / 100;\n            }\n            if (this._showSidebarButton) {\n                this.findbarLeft = (68 * factor).toString() + 'px';\n            }\n            else {\n                this.findbarLeft = '0px';\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxExtendedPdfViewerComponent.prototype, \"mobileFriendlyZoom\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._mobileFriendlyZoom;\n        },\n        /**\n         * This attributes allows you to increase the size of the UI elements so you can use them on small mobile devices.\n         * This attribute is a string with a percent character at the end (e.g. \"150%\").\n         */\n        set: /**\n         * This attributes allows you to increase the size of the UI elements so you can use them on small mobile devices.\n         * This attribute is a string with a percent character at the end (e.g. \"150%\").\n         * @param {?} zoom\n         * @return {?}\n         */ function (zoom) {\n            // tslint:disable-next-line:triple-equals - the type conversion is intended\n            if (zoom == 'true') {\n                zoom = '150%';\n                // tslint:disable-next-line:triple-equals - the type conversion is intended\n            }\n            else if (zoom == 'false' || zoom === undefined || zoom === null) {\n                zoom = '100%';\n            }\n            this._mobileFriendlyZoom = zoom;\n            /** @type {?} */\n            var factor = 1;\n            if (!String(zoom).includes('%')) {\n                zoom = 100 * Number(zoom) + '%';\n            }\n            factor = Number((zoom || '100').replace('%', '')) / 100;\n            this.mobileFriendlyZoomScale = factor;\n            this.toolbarWidth = (100 / factor).toString() + '%';\n            if (this.showSidebarButton) {\n                this.findbarLeft = (68 * factor).toString() + 'px';\n            }\n            else {\n                this.findbarLeft = '0px';\n            }\n            this.secondaryToolbarTop = (12 + 24 * factor).toString() + 'px';\n            this.findbarTop = (-6 + 42 * factor).toString() + 'px';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxExtendedPdfViewerComponent.prototype, \"mobileZoom\", {\n        /** Deprecated. Please use [mobileFriendlyZoom] instead.\n         * This attributes allows you to increase the size of the UI elements so you can use them on small mobile devices.\n         * This attribute is a string with a percent character at the end (e.g. \"150%\").*/\n        set: /**\n         * Deprecated. Please use [mobileFriendlyZoom] instead.\n         * This attributes allows you to increase the size of the UI elements so you can use them on small mobile devices.\n         * This attribute is a string with a percent character at the end (e.g. \"150%\").\n         * @param {?} mobileFriendlyZoom\n         * @return {?}\n         */ function (mobileFriendlyZoom) {\n            this.mobileFriendlyZoom = mobileFriendlyZoom;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxExtendedPdfViewerComponent.prototype, \"sidebarPositionTop\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            if (this._top) {\n                return this._top;\n            }\n            if (this.mobileFriendlyZoom) {\n                if (this.mobileFriendlyZoom.endsWith('%')) {\n                    /** @type {?} */\n                    var zoom = Number(this.mobileFriendlyZoom.substring(0, this.mobileFriendlyZoom.length - 1));\n                    return (16 + 0.16 * zoom).toString() + 'px';\n                }\n                if (this.mobileFriendlyZoom.endsWith('px')) {\n                    return this.mobileFriendlyZoom;\n                }\n                return (16 + 0.16 * Number(this.mobileFriendlyZoom)).toString() + 'px';\n            }\n            return '32px';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NgxExtendedPdfViewerComponent.prototype.calcViewerPositionTop = /**\n     * @return {?}\n     */\n        function () {\n            if (this._top) {\n                this.viewerPositionTop = this._top;\n                return;\n            }\n            if (this.mobileFriendlyZoom) {\n                if (this.mobileFriendlyZoom.endsWith('%')) {\n                    /** @type {?} */\n                    var zoom = Number(this.mobileFriendlyZoom.substring(0, this.mobileFriendlyZoom.length - 1));\n                    if (!this.isPrimaryMenuVisible()) {\n                        this.viewerPositionTop = '0';\n                    }\n                    else {\n                        this.viewerPositionTop = (1 + 0.32 * zoom).toString() + 'px';\n                    }\n                    return;\n                }\n                if (this.mobileFriendlyZoom.endsWith('px')) {\n                    this.viewerPositionTop = this.mobileFriendlyZoom;\n                    return;\n                }\n            }\n            if (this.isPrimaryMenuVisible()) {\n                this.viewerPositionTop = '32px';\n            }\n            else {\n                this.viewerPositionTop = '0';\n            }\n        };\n    /**\n     * @private\n     * @return {?}\n     */\n    NgxExtendedPdfViewerComponent.prototype.loadViewer = /**\n     * @private\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (!window['pdfjs-dist/build/pdf']) {\n                setTimeout(( /**\n                 * @return {?}\n                 */function () { return _this.loadViewer(); }), 25);\n            }\n            else {\n                /** @type {?} */\n                var isIE = !!(( /** @type {?} */(window))).MSInputMethodContext && !!(( /** @type {?} */(document))).documentMode;\n                /** @type {?} */\n                var script2 = document.createElement('script');\n                script2.src = isIE ? 'assets/viewer-es5.js' : 'assets/viewer.js';\n                script2.type = 'text/javascript';\n                script2.async = true;\n                document.getElementsByTagName('head')[0].appendChild(script2);\n            }\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgxExtendedPdfViewerComponent.prototype.emitZoomChange = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.zoomChange.emit(value);\n        };\n    /**\n     * @return {?}\n     */\n    NgxExtendedPdfViewerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if ((( /** @type {?} */(window))).webViewerLoad) {\n                this.doInitPDFViewer();\n            }\n            else {\n                setTimeout(( /**\n                 * @return {?}\n                 */function () { return _this.ngOnInit(); }), 50);\n            }\n        };\n    /**\n     * @private\n     * @return {?}\n     */\n    NgxExtendedPdfViewerComponent.prototype.doInitPDFViewer = /**\n     * @private\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.ignoreResponsiveCSS === undefined) {\n                /** @type {?} */\n                var pdfViewer = document.getElementsByClassName('html');\n                if (pdfViewer && pdfViewer.length > 0) {\n                    /** @type {?} */\n                    var toolbar_1 = pdfViewer[0].getElementsByClassName('toolbar');\n                    if (toolbar_1 && toolbar_1.length > 0) {\n                        /** @type {?} */\n                        var width = toolbar_1[0].clientWidth;\n                        if (window.innerWidth - width > 50) {\n                            this.ignoreResponsiveCSS = true;\n                        }\n                        else {\n                            this.ignoreResponsiveCSS = false;\n                        }\n                    }\n                }\n            }\n            /** @type {?} */\n            var langLinks = document.querySelectorAll('link[type=\"application/l10n\"]');\n            /** @type {?} */\n            var langCount = langLinks.length;\n            if (langCount === 0) {\n                /** @type {?} */\n                var dict = document.querySelector('script[type=\"application/l10n\"]');\n                if (!dict) {\n                    if (!this.useBrowserLocale) {\n                        console.error(\n                        // tslint:disable-next-line:quotemark\n                        \"If you set the attribute 'useBrowserLocale' to false, you must provide the translations yourself in a script or link tag.\");\n                        console.error('The easiest way to do this is to add them to the index.html.');\n                    }\n                }\n                else if (this.useBrowserLocale) {\n                    console.error(\n                    // tslint:disable-next-line:quotemark\n                    \"Please set the attribute 'useBrowserLocale' to false if you provide the translations yourself in a script or link tag.\");\n                }\n            }\n            else if (this.useBrowserLocale) {\n                /** @type {?} */\n                var o = langLinks[0].attributes['origin'];\n                if (o && o.value !== 'ngx-extended-pdf-viewer') {\n                    console.error(\n                    // tslint:disable-next-line:quotemark\n                    \"Please set the attribute 'useBrowserLocale' to false if you provide the translations yourself in a script or link tag.\");\n                }\n            }\n            /** @type {?} */\n            var callback = ( /**\n             * @param {?} e\n             * @return {?}\n             */function (e) {\n                document.removeEventListener('localized', callback);\n                _this.initTimeout = setTimeout(( /**\n                 * @return {?}\n                 */function () {\n                    _this.openPDF();\n                }), _this.delayFirstView);\n            });\n            window.addEventListener('afterprint', ( /**\n             * @param {?} event\n             * @return {?}\n             */function (event) {\n                _this.afterPrint.emit();\n            }));\n            window.addEventListener('beforeprint', ( /**\n             * @param {?} event\n             * @return {?}\n             */function (event) {\n                _this.beforePrint.emit();\n            }));\n            document.addEventListener('localized', callback);\n            if (NgxExtendedPdfViewerComponent.ngxExtendedPdfViewerInitialized) {\n                // tslint:disable-next-line:quotemark\n                console.error(\"You're trying to open two instances of the PDF viewer. Most likely, this will result in errors.\");\n            }\n            /** @type {?} */\n            var onLoaded = ( /**\n             * @return {?}\n             */function () {\n                _this.overrideDefaultSettings();\n                document.removeEventListener('webviewerloaded', onLoaded);\n            });\n            document.addEventListener('webviewerloaded', onLoaded);\n            this.activateTextlayerIfNecessary(null);\n            setTimeout(( /**\n             * @return {?}\n             */function () {\n                // This initializes the webviewer, the file may be passed in to it to initialize the viewer with a pdf directly\n                _this.primaryMenuVisible = true;\n                if (!_this.isSecondaryMenuVisible()) {\n                    _this.showSecondaryToolbarButton = false;\n                }\n                if (!_this.showSecondaryToolbarButton) {\n                    if (!_this.isPrimaryMenuVisible()) {\n                        _this.primaryMenuVisible = false;\n                    }\n                }\n                _this.calcViewerPositionTop();\n                (( /** @type {?} */(window))).webViewerLoad();\n                (( /** @type {?} */(window))).PDFViewerApplication.appConfig.defaultUrl = ''; // IE bugfix\n                (( /** @type {?} */(window))).PDFViewerApplication.appConfig.filenameForDownload = _this.filenameForDownload;\n                (( /** @type {?} */(window))).PDFViewerApplicationOptions.set('locale', _this.language);\n                (( /** @type {?} */(window))).PDFViewerApplicationOptions.set('imageResourcesPath', _this.imageResourcesPath);\n                (( /** @type {?} */(window))).PDFViewerApplication.isViewerEmbedded = true;\n                window.addEventListener('keydown', (( /** @type {?} */(window))).PDFViewerApplication.printKeyDownListener, true);\n                /** @type {?} */\n                var pc = document.getElementById('printContainer');\n                if (pc) {\n                    document.getElementsByTagName('body')[0].appendChild(pc);\n                }\n            }), 0);\n        };\n    /**\n     * @return {?}\n     */\n    NgxExtendedPdfViewerComponent.prototype.checkHeight = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var container = document.getElementsByClassName('zoom')[0];\n            if (container.clientHeight === 0 && this._height.includes('%')) {\n                /** @type {?} */\n                var available = window.innerHeight;\n                /** @type {?} */\n                var rect = container.getBoundingClientRect();\n                /** @type {?} */\n                var top_1 = rect.top;\n                /** @type {?} */\n                var mh = available - top_1;\n                /** @type {?} */\n                var factor = Number(this._height.replace('%', ''));\n                mh = (mh * factor) / 100;\n                if (mh > 100) {\n                    this.minHeight = mh + 'px';\n                }\n                else {\n                    this.minHeight = '100px';\n                }\n            }\n        };\n    /**\n     * @param {?} newSpread\n     * @return {?}\n     */\n    NgxExtendedPdfViewerComponent.prototype.onSpreadChange = /**\n     * @param {?} newSpread\n     * @return {?}\n     */\n        function (newSpread) {\n            this.spreadChange.emit(newSpread);\n        };\n    /**\n     * @private\n     * @param {?} options\n     * @return {?}\n     */\n    NgxExtendedPdfViewerComponent.prototype.activateTextlayerIfNecessary = /**\n     * @private\n     * @param {?} options\n     * @return {?}\n     */\n        function (options) {\n            if (this.textLayer === undefined) {\n                if (!this.handTool) {\n                    if (options) {\n                        options.set('textLayerMode', 1);\n                    }\n                    this.textLayer = true;\n                    if (this.showFindButton === undefined) {\n                        this.showFindButton = true;\n                    }\n                }\n                else {\n                    if (options) {\n                        options.set('textLayerMode', this.showHandToolButton ? 1 : 0);\n                    }\n                    if (!this.showHandToolButton) {\n                        if (this.showFindButton || this.showFindButton === undefined) {\n                            this.showFindButton = false;\n                            if (this.logLevel >= VerbosityLevel.WARNINGS) {\n                                // tslint:disable-next-line:max-line-length\n                                console.warn('Hiding the \"find\" button because the text layer of the PDF file is not rendered. Use [textLayer]=\"true\" to enable the find button.');\n                            }\n                        }\n                        if (this.showHandToolButton) {\n                            if (this.logLevel >= VerbosityLevel.WARNINGS) {\n                                // tslint:disable-next-line:max-line-length\n                                console.warn('Hiding the \"hand tool / selection mode\" menu because the text layer of the PDF file is not rendered. Use [textLayer]=\"true\" to enable the the menu items.');\n                                this.showHandToolButton = false;\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                if (this.textLayer) {\n                    if (options) {\n                        options.set('textLayerMode', 1);\n                    }\n                    this.textLayer = true;\n                    if (this.showFindButton === undefined) {\n                        this.showFindButton = true;\n                    }\n                }\n                else {\n                    if (options) {\n                        options.set('textLayerMode', 0);\n                    }\n                    this.textLayer = false;\n                    if (this.showFindButton) {\n                        if (this.logLevel >= VerbosityLevel.WARNINGS) {\n                            // tslint:disable-next-line:max-line-length\n                            console.warn('Hiding the \"find\" button because the text layer of the PDF file is not rendered. Use [textLayer]=\"true\" to enable the find button.');\n                            this.showFindButton = false;\n                        }\n                    }\n                    if (this.showHandToolButton) {\n                        if (this.logLevel >= VerbosityLevel.WARNINGS) {\n                            // tslint:disable-next-line:max-line-length\n                            console.warn('Hiding the \"hand tool / selection mode\" menu because the text layer of the PDF file is not rendered. Use [textLayer]=\"true\" to enable the the menu items.');\n                            this.showHandToolButton = false;\n                        }\n                    }\n                }\n            }\n        };\n    /**\n     * @private\n     * @return {?}\n     */\n    NgxExtendedPdfViewerComponent.prototype.overrideDefaultSettings = /**\n     * @private\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var options = (( /** @type {?} */(window))).PDFViewerApplicationOptions;\n            // tslint:disable-next-line:forin\n            for (var key in defaultOptions) {\n                options.set(key, defaultOptions[key]);\n            }\n            options.set('disablePreferences', true);\n            this.setZoom();\n            options.set('ignoreKeyboard', this.ignoreKeyboard);\n            options.set('ignoreKeys', this.ignoreKeys);\n            options.set('acceptKeys', this.acceptKeys);\n            this.activateTextlayerIfNecessary(options);\n            /** @type {?} */\n            var sidebarVisible = this.sidebarVisible;\n            if (sidebarVisible === undefined) {\n                sidebarVisible = this.showSidebarOnLoad;\n            }\n            if (sidebarVisible !== undefined) {\n                (( /** @type {?} */(window))).PDFViewerApplication.sidebarViewOnLoad = sidebarVisible ? 1 : 0;\n                if ((( /** @type {?} */(window))).PDFViewerApplication.appConfig) {\n                    (( /** @type {?} */(window))).PDFViewerApplication.appConfig.sidebarViewOnLoad = sidebarVisible ? 1 : 0;\n                }\n                options.set('sidebarViewOnLoad', this.sidebarVisible ? 1 : 0);\n            }\n            if (this.spread === 'even') {\n                options.set('spreadModeOnLoad', 2);\n                if ((( /** @type {?} */(window))).PDFViewerApplication.pdfViewer) {\n                    (( /** @type {?} */(window))).PDFViewerApplication.pdfViewer.spreadMode = 2;\n                }\n                this.onSpreadChange('even');\n            }\n            else if (this.spread === 'odd') {\n                options.set('spreadModeOnLoad', 1);\n                if ((( /** @type {?} */(window))).PDFViewerApplication.pdfViewer) {\n                    (( /** @type {?} */(window))).PDFViewerApplication.pdfViewer.spreadMode = 1;\n                }\n                this.onSpreadChange('odd');\n            }\n            else {\n                options.set('spreadModeOnLoad', 0);\n                if ((( /** @type {?} */(window))).PDFViewerApplication.pdfViewer) {\n                    (( /** @type {?} */(window))).PDFViewerApplication.pdfViewer.spreadMode = 0;\n                }\n                this.onSpreadChange('off');\n            }\n            if (this.printResolution) {\n                options.set('printResolution', this.printResolution);\n            }\n            if (this.showBorders) {\n                options.set('showBorders', this.showBorders);\n            }\n        };\n    /**\n     * @private\n     * @return {?}\n     */\n    NgxExtendedPdfViewerComponent.prototype.openPDF = /**\n     * @private\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            ServiceWorkerOptions.showUnverifiedSignatures = this.showUnverifiedSignatures;\n            NgxExtendedPdfViewerComponent.ngxExtendedPdfViewerInitialized = true;\n            this.onResize();\n            if (!this.listenToURL) {\n                (( /** @type {?} */(window))).PDFViewerApplication.pdfLinkService.setHash = ( /**\n                 * @return {?}\n                 */function () { });\n            }\n            this.initTimeout = null;\n            this.selectCursorTool();\n            (( /** @type {?} */(window))).PDFViewerApplication.eventBus.on('pagesloaded', ( /**\n             * @param {?} x\n             * @return {?}\n             */function (x) {\n                _this.pagesLoaded.emit(x);\n                if (_this.rotation) {\n                    /** @type {?} */\n                    var r = Number(_this.rotation);\n                    if (r === 0 || r === 90 || r === 180 || r === 270) {\n                        (( /** @type {?} */(window))).PDFViewerApplication.pdfViewer.pagesRotation = r;\n                    }\n                }\n                else {\n                    (( /** @type {?} */(window))).PDFViewerApplication.pdfViewer.pagesRotation = 0;\n                }\n                setTimeout(( /**\n                 * @return {?}\n                 */function () {\n                    if (_this.nameddest) {\n                        (( /** @type {?} */(window))).PDFViewerApplication.pdfLinkService.navigateTo(_this.nameddest);\n                    }\n                    else if (_this.page) {\n                        (( /** @type {?} */(window))).PDFViewerApplication.page = Number(_this.page);\n                    }\n                    else if (_this.pageLabel) {\n                        (( /** @type {?} */(window))).PDFViewerApplication.pdfViewer.currentPageLabel = _this.pageLabel;\n                    }\n                }));\n                _this.setZoom();\n            }));\n            (( /** @type {?} */(window))).PDFViewerApplication.eventBus.on('pagerendered', ( /**\n             * @param {?} x\n             * @return {?}\n             */function (x) {\n                _this.ngZone.run(( /**\n                 * @return {?}\n                 */function () {\n                    _this.pageRendered.emit(x);\n                }));\n            }));\n            (( /** @type {?} */(window))).PDFViewerApplication.eventBus.on('download', ( /**\n             * @param {?} x\n             * @return {?}\n             */function (x) {\n                _this.ngZone.run(( /**\n                 * @return {?}\n                 */function () {\n                    _this.pdfDownloaded.emit(x);\n                }));\n            }));\n            (( /** @type {?} */(window))).PDFViewerApplication.eventBus.on('scalechanging', ( /**\n             * @param {?} x\n             * @return {?}\n             */function (x) {\n                _this.ngZone.run(( /**\n                 * @return {?}\n                 */function () {\n                    setTimeout(( /**\n                     * @return {?}\n                     */function () {\n                        _this.ngZone.run(( /**\n                         * @return {?}\n                         */function () {\n                            _this.currentZoomFactor.emit(x.scale);\n                            _this.emitZoomChange(x.scale * 100);\n                        }));\n                    }));\n                }));\n            }));\n            (( /** @type {?} */(window))).PDFViewerApplication.eventBus.on('rotationchanging', ( /**\n             * @param {?} x\n             * @return {?}\n             */function (x) {\n                _this.ngZone.run(( /**\n                 * @return {?}\n                 */function () {\n                    _this.rotationChange.emit(x.pagesRotation);\n                }));\n            }));\n            (( /** @type {?} */(window))).PDFViewerApplication.eventBus.on('fileinputchange', ( /**\n             * @param {?} x\n             * @return {?}\n             */function (x) {\n                _this.ngZone.run(( /**\n                 * @return {?}\n                 */function () {\n                    /** @type {?} */\n                    var path = x.fileInput.value.replace('C:\\\\fakepath\\\\', '');\n                    _this.srcChange.emit(path);\n                }));\n            }));\n            (( /** @type {?} */(window))).PDFViewerApplication.eventBus.on('cursortoolchanged', ( /**\n             * @param {?} x\n             * @return {?}\n             */function (x) {\n                _this.ngZone.run(( /**\n                 * @return {?}\n                 */function () {\n                    _this.handToolChange.emit(x.tool === 1);\n                }));\n            }));\n            (( /** @type {?} */(window))).PDFViewerApplication.eventBus.on('sidebarviewchanged', ( /**\n             * @param {?} x\n             * @return {?}\n             */function (x) {\n                _this.ngZone.run(( /**\n                 * @return {?}\n                 */function () {\n                    _this.sidebarVisibleChange.emit(x.view === 1);\n                }));\n            }));\n            (( /** @type {?} */(window))).PDFViewerApplication.eventBus.on('updatefindcontrolstate', ( /**\n             * @param {?} x\n             * @return {?}\n             */function (x) {\n                if (_this.updateFindMatchesCount) {\n                    if (x.state === FindState.NOT_FOUND) {\n                        _this.updateFindMatchesCount.emit({ current: 0, total: 0 });\n                    }\n                    else if (x.matchesCount.total) {\n                        _this.updateFindMatchesCount.emit(x.matchesCount);\n                    }\n                }\n                if (_this.updateFindState) {\n                    _this.updateFindState.emit(x.state);\n                }\n            }));\n            (( /** @type {?} */(window))).PDFViewerApplication.eventBus.on('updatefindmatchescount', ( /**\n             * @param {?} x\n             * @return {?}\n             */function (x) {\n                if (_this.updateFindMatchesCount) {\n                    if (x.matchesCount.total) {\n                        _this.updateFindMatchesCount.emit(x.matchesCount);\n                    }\n                }\n            }));\n            (( /** @type {?} */(window))).PDFViewerApplication.eventBus.on('pagechanging', ( /**\n             * @param {?} x\n             * @return {?}\n             */function (x) {\n                _this.ngZone.run(( /**\n                 * @return {?}\n                 */function () {\n                    /** @type {?} */\n                    var currentPage = (( /** @type {?} */(window))).PDFViewerApplication.pdfViewer.currentPageNumber;\n                    /** @type {?} */\n                    var currentPageLabel = (( /** @type {?} */(window))).PDFViewerApplication.pdfViewer.currentPageLabel;\n                    _this.pageChange.emit(currentPage);\n                    _this.pageLabelChange.emit(currentPageLabel);\n                }));\n            }));\n            this.checkHeight();\n            // open a file in the viewer\n            if (!!this._src) {\n                /** @type {?} */\n                var options = {\n                    password: this.password,\n                    verbosity: this.logLevel\n                };\n                (( /** @type {?} */(window))).PDFViewerApplication.open(this._src, options).then(( /**\n                 * @return {?}\n                 */function () { return _this.pdfLoaded.emit({ pagesCount: (( /** @type {?} */(window))).PDFViewerApplication.pagesCount }); }), ( /**\n                 * @param {?} error\n                 * @return {?}\n                 */function (error) { return _this.pdfLoadingFailed.emit(error); }));\n            }\n            setTimeout(( /**\n             * @return {?}\n             */function () {\n                if (_this.page) {\n                    (( /** @type {?} */(window))).PDFViewerApplication.page = Number(_this.page);\n                }\n            }), 100);\n        };\n    /**\n     * @private\n     * @return {?}\n     */\n    NgxExtendedPdfViewerComponent.prototype.selectCursorTool = /**\n     * @private\n     * @return {?}\n     */\n        function () {\n            (( /** @type {?} */(window))).PDFViewerApplication.eventBus.dispatch('switchcursortool', { tool: this.handTool ? 1 : 0 });\n        };\n    /**\n     * @return {?}\n     */\n    NgxExtendedPdfViewerComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            NgxExtendedPdfViewerComponent.ngxExtendedPdfViewerInitialized = false;\n            if (this.initTimeout) {\n                clearTimeout(this.initTimeout);\n                this.initTimeout = undefined;\n            }\n            /** @type {?} */\n            var app = (( /** @type {?} */(window))).PDFViewerApplication;\n            if (app) {\n                app.cleanup();\n                app.close();\n                if ((( /** @type {?} */(window))).PDFViewerApplication.printKeyDownListener) {\n                    (( /** @type {?} */(window))).removeEventListener('keydown', (( /** @type {?} */(window))).PDFViewerApplication.printKeyDownListener, true);\n                }\n                if (app._boundEvents) {\n                    app.unbindWindowEvents();\n                }\n                /** @type {?} */\n                var bus = app.eventBus;\n                if (bus) {\n                    app.unbindEvents();\n                    for (var key in bus._listeners) {\n                        if (bus._listeners[key]) {\n                            /** @type {?} */\n                            var list = bus._listeners[key];\n                            // not sure if the for loop is necessary - but\n                            // it might improve garbage collection if the \"listeners\"\n                            // array is stored somewhere else\n                            for (var i = 0; i < list.length; i++) {\n                                list[i] = undefined;\n                            }\n                            bus._listeners[key] = undefined;\n                        }\n                    }\n                }\n                app.eventBus = null;\n            }\n            /** @type {?} */\n            var body = document.getElementsByTagName('body');\n            if (body[0]) {\n                /** @type {?} */\n                var topLevelElements = body[0].children;\n                for (var i = topLevelElements.length - 1; i >= 0; i--) {\n                    /** @type {?} */\n                    var e = topLevelElements.item(i);\n                    if (e && e.id === 'printContainer') {\n                        body[0].removeChild(e);\n                    }\n                    else if (e && e.id === 'fileInput') {\n                        body[0].removeChild(e);\n                    }\n                }\n            }\n        };\n    /**\n     * @private\n     * @return {?}\n     */\n    NgxExtendedPdfViewerComponent.prototype.isSecondaryMenuVisible = /**\n     * @private\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var visible = this.showHandToolButton ||\n                this.showPagingButtons ||\n                this.showPropertiesButton ||\n                this.showRotateButton ||\n                this.showScrollingButton ||\n                this.showRotateButton ||\n                this.showSpreadButton;\n            if (visible) {\n                return true;\n            }\n            return false;\n        };\n    /**\n     * @private\n     * @return {?}\n     */\n    NgxExtendedPdfViewerComponent.prototype.isPrimaryMenuVisible = /**\n     * @private\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var visible = this.showBookmarkButton ||\n                this.showDownloadButton ||\n                this.showFindButton ||\n                this.showOpenFileButton ||\n                this.showPagingButtons ||\n                this.showPresentationModeButton ||\n                this.showPrintButton ||\n                this.showPropertiesButton ||\n                this.showSidebarButton ||\n                this.showSecondaryToolbarButton ||\n                this.showZoomButtons;\n            if (visible) {\n                return true;\n            }\n            return false;\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NgxExtendedPdfViewerComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            var _this = this;\n            if (NgxExtendedPdfViewerComponent.ngxExtendedPdfViewerInitialized) {\n                if ('src' in changes || 'base64Src' in changes) {\n                    if (!!this._src) {\n                        this.overrideDefaultSettings();\n                        (( /** @type {?} */(window))).PDFViewerApplication.open(this._src).then(( /**\n                         * @return {?}\n                         */function () { return _this.pdfLoaded.emit({ pagesCount: (( /** @type {?} */(window))).PDFViewerApplication.pagesCount }); }), ( /**\n                         * @param {?} error\n                         * @return {?}\n                         */function (error) { return _this.pdfLoadingFailed.emit(error); }));\n                    }\n                }\n                if ('zoom' in changes) {\n                    this.setZoom();\n                }\n                if ('handTool' in changes) {\n                    this.selectCursorTool();\n                }\n                if ('page' in changes) {\n                    if (this.page) {\n                        (( /** @type {?} */(window))).PDFViewerApplication.page = this.page;\n                    }\n                }\n                if ('pageLabel' in changes) {\n                    if (this.pageLabel) {\n                        (( /** @type {?} */(window))).PDFViewerApplication.pdfViewer.currentPageLabel = this.pageLabel;\n                    }\n                }\n                if ('rotation' in changes) {\n                    if (this.rotation) {\n                        /** @type {?} */\n                        var r = Number(this.rotation);\n                        if (r === 0 || r === 90 || r === 180 || r === 270) {\n                            (( /** @type {?} */(window))).PDFViewerApplication.pdfViewer.pagesRotation = r;\n                        }\n                    }\n                    else {\n                        (( /** @type {?} */(window))).PDFViewerApplication.pdfViewer.pagesRotation = 0;\n                    }\n                }\n                if ('sidebarVisible' in changes) {\n                    if (this.sidebarVisible) {\n                        (( /** @type {?} */(window))).PDFViewerApplication.pdfSidebar.open();\n                    }\n                    else {\n                        (( /** @type {?} */(window))).PDFViewerApplication.pdfSidebar.close();\n                    }\n                }\n                if ('filenameForDownload' in changes) {\n                    (( /** @type {?} */(window))).PDFViewerApplication.appConfig.filenameForDownload = this.filenameForDownload;\n                }\n                if ('nameddest' in changes) {\n                    if (this.nameddest) {\n                        (( /** @type {?} */(window))).PDFViewerApplication.pdfLinkService.navigateTo(this.nameddest);\n                    }\n                }\n                if ('spread' in changes) {\n                    if (this.spread === 'even') {\n                        (( /** @type {?} */(window))).PDFViewerApplication.spreadModeOnLoad = 2;\n                        (( /** @type {?} */(window))).PDFViewerApplication.pdfViewer.spreadMode = 2;\n                        this.onSpreadChange('even');\n                    }\n                    else if (this.spread === 'odd') {\n                        (( /** @type {?} */(window))).PDFViewerApplication.spreadModeOnLoad = 1;\n                        (( /** @type {?} */(window))).PDFViewerApplication.pdfViewer.spreadMode = 1;\n                        this.onSpreadChange('odd');\n                    }\n                    else {\n                        (( /** @type {?} */(window))).PDFViewerApplication.spreadModeOnLoad = 0;\n                        (( /** @type {?} */(window))).PDFViewerApplication.pdfViewer.spreadMode = 0;\n                        this.onSpreadChange('off');\n                    }\n                }\n                this.primaryMenuVisible = true;\n                if (!this.isSecondaryMenuVisible()) {\n                    this.showSecondaryToolbarButton = false;\n                }\n                if (!this.showSecondaryToolbarButton) {\n                    if (!this.isPrimaryMenuVisible()) {\n                        this.primaryMenuVisible = false;\n                    }\n                }\n                this.calcViewerPositionTop();\n            }\n            if ('ignoreResponsiveCSS' in changes) {\n                if (this.ignoreResponsiveCSS) {\n                    this.onResize();\n                }\n                else {\n                    removeDynamicCSS();\n                }\n            }\n            if ('printResolution' in changes) {\n                /** @type {?} */\n                var options = (( /** @type {?} */(window))).PDFViewerApplicationOptions;\n                if (options) {\n                    options.set('printResolution', this.printResolution);\n                }\n            }\n            if ('ignoreKeyboard' in changes) {\n                /** @type {?} */\n                var options = (( /** @type {?} */(window))).PDFViewerApplicationOptions;\n                if (options) {\n                    this.overrideDefaultSettings();\n                }\n            }\n            if ('ignoreKeys' in changes) {\n                /** @type {?} */\n                var options = (( /** @type {?} */(window))).PDFViewerApplicationOptions;\n                if (options) {\n                    this.overrideDefaultSettings();\n                }\n            }\n            if ('acceptKeys' in changes) {\n                /** @type {?} */\n                var options = (( /** @type {?} */(window))).PDFViewerApplicationOptions;\n                if (options) {\n                    this.overrideDefaultSettings();\n                }\n            }\n            if ('showBorders' in changes) {\n                /** @type {?} */\n                var options = (( /** @type {?} */(window))).PDFViewerApplicationOptions;\n                if (options) {\n                    this.overrideDefaultSettings();\n                    /** @type {?} */\n                    var viewer = ( /** @type {?} */(document.getElementById('viewer')));\n                    if (this.showBorders) {\n                        viewer.classList.remove('removePageBorders');\n                    }\n                    else {\n                        viewer.classList.add('removePageBorders');\n                    }\n                    if ((( /** @type {?} */(window))).PDFViewerApplication.pdfViewer) {\n                        (( /** @type {?} */(window))).PDFViewerApplication.pdfViewer.removePageBorders = !this.showBorders;\n                    }\n                    /** @type {?} */\n                    var zoomEvent = ( /** @type {?} */({\n                        source: viewer,\n                        scale: (Number(this.zoom) | 100) / 100,\n                        presetValue: this.zoom\n                    }));\n                    (( /** @type {?} */(window))).PDFViewerApplication.eventBus.dispatch('scalechanging', zoomEvent);\n                }\n            }\n            if ('showUnverifiedSignatures' in changes) {\n                if ((( /** @type {?} */(window))).PDFViewerApplication && (( /** @type {?} */(window))).PDFViewerApplication.pdfDocument) {\n                    (( /** @type {?} */(window))).PDFViewerApplication.pdfDocument._transport.messageHandler.send('showUnverifiedSignatures', this.showUnverifiedSignatures);\n                }\n            }\n        };\n    /**\n     * @private\n     * @return {?}\n     */\n    NgxExtendedPdfViewerComponent.prototype.setZoom = /**\n     * @private\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var zoomAsNumber = this.zoom;\n            console.log(this.zoom);\n            if (String(zoomAsNumber).endsWith('%')) {\n                zoomAsNumber = Number(String(zoomAsNumber).replace('%', '')) / 100;\n            }\n            else if (!isNaN(Number(zoomAsNumber))) {\n                zoomAsNumber = Number(zoomAsNumber) / 100;\n            }\n            if (!zoomAsNumber) {\n                zoomAsNumber = 'auto';\n            }\n            if ((( /** @type {?} */(window))).PDFViewerApplication) {\n                (( /** @type {?} */(window))).PDFViewerApplicationOptions.set('defaultZoomValue', zoomAsNumber);\n            }\n            if ((( /** @type {?} */(window))).PDFViewerApplication.pdfViewer) {\n                (( /** @type {?} */(window))).PDFViewerApplication.pdfViewer.currentScaleValue = zoomAsNumber;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NgxExtendedPdfViewerComponent.prototype.onResize = /**\n     * @return {?}\n     */\n        function () {\n            if (this.ignoreResponsiveCSS) {\n                clearTimeout(this.resizeTimeout);\n                this.resizeTimeout = setTimeout(this.doResize, 100);\n            }\n        };\n    /**\n     * @private\n     * @return {?}\n     */\n    NgxExtendedPdfViewerComponent.prototype.doResize = /**\n     * @private\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var pdfViewer = document.getElementsByClassName('html');\n            if (pdfViewer && pdfViewer.length > 0) {\n                /** @type {?} */\n                var container = document.getElementById('outerContainer');\n                if (container) {\n                    /** @type {?} */\n                    var width = container.clientWidth;\n                    resizeUpTo900px(width);\n                    resizeUpTo840px(width);\n                    resizeUpTo770px(container, width);\n                    resizeUpTo700px(container, width);\n                    resizeUpTo640px(container, width);\n                    resizeUpTo535px(width);\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NgxExtendedPdfViewerComponent.prototype.onContextMenu = /**\n     * @return {?}\n     */\n        function () {\n            return this.contextMenuAllowed;\n        };\n    NgxExtendedPdfViewerComponent.ngxExtendedPdfViewerInitialized = false;\n    return NgxExtendedPdfViewerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar NgxExtendedPdfViewerService = /** @class */ /*@__PURE__*/ (function () {\n    function NgxExtendedPdfViewerService() {\n    }\n    /**\n     * @param {?} text\n     * @param {?=} options\n     * @return {?}\n     */\n    NgxExtendedPdfViewerService.prototype.find = /**\n     * @param {?} text\n     * @param {?=} options\n     * @return {?}\n     */\n        function (text, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            if (!NgxExtendedPdfViewerComponent.ngxExtendedPdfViewerInitialized) {\n                // tslint:disable-next-line:quotemark\n                console.error(\"The PDF viewer hasn't finished initializing. Please call find() later.\");\n                return false;\n            }\n            else {\n                /** @type {?} */\n                var highlightAllCheckbox = ( /** @type {?} */(document.getElementById('findHighlightAll')));\n                if (highlightAllCheckbox) {\n                    highlightAllCheckbox.checked = options.highlightAll || false;\n                }\n                /** @type {?} */\n                var matchCaseCheckbox = ( /** @type {?} */(document.getElementById('findMatchCase')));\n                if (matchCaseCheckbox) {\n                    matchCaseCheckbox.checked = options.matchCase || false;\n                }\n                /** @type {?} */\n                var entireWorkCheckbox = ( /** @type {?} */(document.getElementById('findEntireWord')));\n                if (entireWorkCheckbox) {\n                    entireWorkCheckbox.checked = options.wholeWords || false;\n                }\n                /** @type {?} */\n                var findIgnoreAccentsCheckbox = ( /** @type {?} */(document.getElementById('findIgnoreAccents')));\n                if (findIgnoreAccentsCheckbox) {\n                    findIgnoreAccentsCheckbox.checked = options.ignoreAccents || false;\n                }\n                /** @type {?} */\n                var inputField = document.getElementById('findInput');\n                if (inputField) {\n                    inputField.setAttribute('value', text);\n                    inputField.dispatchEvent(new Event('input'));\n                    return true;\n                }\n                else {\n                    // tslint:disable-next-line:quotemark\n                    console.error(\"Unexpected error: the input field used to search isn't part of the DOM.\");\n                    return false;\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NgxExtendedPdfViewerService.prototype.findNext = /**\n     * @return {?}\n     */\n        function () {\n            if (!NgxExtendedPdfViewerComponent.ngxExtendedPdfViewerInitialized) {\n                // tslint:disable-next-line:quotemark\n                console.error(\"The PDF viewer hasn't finished initializing. Please call findNext() later.\");\n                return false;\n            }\n            else {\n                /** @type {?} */\n                var button = document.getElementById('findNext');\n                if (button) {\n                    button.click();\n                    return true;\n                }\n                return false;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NgxExtendedPdfViewerService.prototype.findPrevious = /**\n     * @return {?}\n     */\n        function () {\n            if (!NgxExtendedPdfViewerComponent.ngxExtendedPdfViewerInitialized) {\n                // tslint:disable-next-line:quotemark\n                console.error(\"The PDF viewer hasn't finished initializing. Please call findPrevious() later.\");\n                return false;\n            }\n            else {\n                /** @type {?} */\n                var button = document.getElementById('findPrevious');\n                if (button) {\n                    button.click();\n                    return true;\n                }\n                return false;\n            }\n        };\n    /** @nocollapse */ NgxExtendedPdfViewerService.ngInjectableDef = defineInjectable({ factory: function NgxExtendedPdfViewerService_Factory() { return new NgxExtendedPdfViewerService(); }, token: NgxExtendedPdfViewerService, providedIn: \"root\" });\n    return NgxExtendedPdfViewerService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PdfZoomDropdownComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PdfZoomDropdownComponent() {\n        this.zoomChange = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    PdfZoomDropdownComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    /**\n     * @return {?}\n     */\n    PdfZoomDropdownComponent.prototype.emitZoomChange = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var selectedIndex = this.sizeSelector.nativeElement.selectedIndex;\n            if (selectedIndex || selectedIndex === 0) {\n                /** @type {?} */\n                var s = ( /** @type {?} */(this.sizeSelector.nativeElement.options[selectedIndex]));\n                /** @type {?} */\n                var value = s.label;\n                if (value.endsWith('%')) {\n                    value = Number(value.replace('%', ''));\n                }\n                else {\n                    value = s.value;\n                }\n                this.zoomChange.emit(value);\n            }\n        };\n    return PdfZoomDropdownComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PdfContextMenuComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PdfContextMenuComponent() {\n    }\n    /**\n     * @return {?}\n     */\n    PdfContextMenuComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return PdfContextMenuComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PdfPresentationModeComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PdfPresentationModeComponent() {\n    }\n    return PdfPresentationModeComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PdfOpenFileComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PdfOpenFileComponent() {\n    }\n    return PdfOpenFileComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PdfPrintComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PdfPrintComponent() {\n    }\n    return PdfPrintComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PdfDownloadComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PdfDownloadComponent() {\n    }\n    return PdfDownloadComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PdfBookmarkComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PdfBookmarkComponent() {\n    }\n    return PdfBookmarkComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PdfZoomToolbarComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PdfZoomToolbarComponent() {\n        this.zoomChange = new EventEmitter();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    PdfZoomToolbarComponent.prototype.emitZoomChange = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            debugger;\n            this.zoomChange.emit(event);\n        };\n    return PdfZoomToolbarComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PdfPagingAreaComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PdfPagingAreaComponent() {\n    }\n    return PdfPagingAreaComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PdfFindbarComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PdfFindbarComponent() {\n    }\n    return PdfFindbarComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PdfSidebarComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PdfSidebarComponent() {\n    }\n    return PdfSidebarComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PdfSecondaryToolbarComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PdfSecondaryToolbarComponent() {\n        this.spreadChange = new EventEmitter();\n    }\n    /**\n     * @param {?} newSpread\n     * @return {?}\n     */\n    PdfSecondaryToolbarComponent.prototype.onSpreadChange = /**\n     * @param {?} newSpread\n     * @return {?}\n     */\n        function (newSpread) {\n            this.spreadChange.emit(newSpread);\n        };\n    /**\n     * @return {?}\n     */\n    PdfSecondaryToolbarComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    PdfSecondaryToolbarComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if ('mobileFriendlyZoomScale' in changes) {\n                console.log(this.mobileFriendlyZoomScale);\n            }\n        };\n    return PdfSecondaryToolbarComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PdfDocumentPropertiesOverlayComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PdfDocumentPropertiesOverlayComponent() {\n    }\n    /**\n     * @return {?}\n     */\n    PdfDocumentPropertiesOverlayComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return PdfDocumentPropertiesOverlayComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PdfSearchInputFieldComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PdfSearchInputFieldComponent() {\n    }\n    /**\n     * @return {?}\n     */\n    PdfSearchInputFieldComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return PdfSearchInputFieldComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PdfFindPreviousComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PdfFindPreviousComponent() {\n    }\n    /**\n     * @return {?}\n     */\n    PdfFindPreviousComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return PdfFindPreviousComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PdfFindNextComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PdfFindNextComponent() {\n    }\n    /**\n     * @return {?}\n     */\n    PdfFindNextComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return PdfFindNextComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PdfFindInputAreaComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PdfFindInputAreaComponent() {\n    }\n    /**\n     * @return {?}\n     */\n    PdfFindInputAreaComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return PdfFindInputAreaComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PdfFindbarOptionsTwoContainerComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PdfFindbarOptionsTwoContainerComponent() {\n    }\n    /**\n     * @return {?}\n     */\n    PdfFindbarOptionsTwoContainerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return PdfFindbarOptionsTwoContainerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PdfFindbarOptionsOneContainerComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PdfFindbarOptionsOneContainerComponent() {\n    }\n    /**\n     * @return {?}\n     */\n    PdfFindbarOptionsOneContainerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return PdfFindbarOptionsOneContainerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PdfFindMatchCaseComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PdfFindMatchCaseComponent() {\n    }\n    /**\n     * @return {?}\n     */\n    PdfFindMatchCaseComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return PdfFindMatchCaseComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PdfFindHighlightAllComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PdfFindHighlightAllComponent() {\n    }\n    /**\n     * @return {?}\n     */\n    PdfFindHighlightAllComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return PdfFindHighlightAllComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PdfFindEntireWordComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PdfFindEntireWordComponent() {\n    }\n    /**\n     * @return {?}\n     */\n    PdfFindEntireWordComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return PdfFindEntireWordComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PdfFindIgnoreAccentsComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PdfFindIgnoreAccentsComponent() {\n    }\n    /**\n     * @return {?}\n     */\n    PdfFindIgnoreAccentsComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return PdfFindIgnoreAccentsComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PdfFindbarOptionsThreeContainerComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PdfFindbarOptionsThreeContainerComponent() {\n    }\n    /**\n     * @return {?}\n     */\n    PdfFindbarOptionsThreeContainerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return PdfFindbarOptionsThreeContainerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PdfFindResultsCountComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PdfFindResultsCountComponent() {\n    }\n    /**\n     * @return {?}\n     */\n    PdfFindResultsCountComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return PdfFindResultsCountComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PdfFindbarMessageContainerComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PdfFindbarMessageContainerComponent() {\n    }\n    /**\n     * @return {?}\n     */\n    PdfFindbarMessageContainerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return PdfFindbarMessageContainerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PdfSplitToolbarButtonComponent = /** @class */ /*@__PURE__*/ (function () {\n    function PdfSplitToolbarButtonComponent() {\n    }\n    /**\n     * @return {?}\n     */\n    PdfSplitToolbarButtonComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return PdfSplitToolbarButtonComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} cmd\n * @param {?} keycode\n * @return {?}\n */\nfunction isKeyIgnored(cmd, keycode) {\n    if (keycode === 16 || keycode === 17 || keycode === 18 || keycode === 224) {\n        // ignore solitary SHIFT, ALT, CMD, and CTRL because they only make sense as two-key-combinations\n        return true;\n    }\n    // cmd is a bit-array:\n    // 1 == CTRL\n    // 2 == ALT\n    // 4 == SHIFT\n    // 8 == META\n    /** @type {?} */\n    var options = (( /** @type {?} */(window))).PDFViewerApplicationOptions;\n    /** @type {?} */\n    var ignoreKeyboard = options.get('ignoreKeyboard');\n    if (!!ignoreKeyboard) {\n        return true;\n    }\n    /** @type {?} */\n    var ignoreKeys = options.get('ignoreKeys');\n    if (!!ignoreKeys && ignoreKeys.length > 0) {\n        if (isKeyInList(ignoreKeys, cmd, keycode)) {\n            return true;\n        }\n    }\n    /** @type {?} */\n    var acceptKeys = options.get('acceptKeys');\n    if (!!acceptKeys && acceptKeys.length > 0) {\n        return !isKeyInList(acceptKeys, cmd, keycode);\n    }\n    return false;\n}\n/**\n * @param {?} settings\n * @param {?} cmd\n * @param {?} keycode\n * @return {?}\n */\nfunction isKeyInList(settings, cmd, keycode) {\n    return settings.some(( /**\n     * @param {?} keyDef\n     * @return {?}\n     */function (keyDef) { return isKey(keyDef, cmd, keycode); }));\n}\n/**\n * @param {?} keyDef\n * @param {?} cmd\n * @param {?} keycode\n * @return {?}\n */\nfunction isKey(keyDef, cmd, keycode) {\n    /** @type {?} */\n    var cmdDef = 0;\n    /** @type {?} */\n    var key = 0;\n    keyDef = keyDef.toLowerCase();\n    // tslint:disable: no-bitwise\n    if (keyDef.includes('ctrl+')) {\n        cmdDef |= 1;\n        keyDef = keyDef.replace('ctrl+', '');\n    }\n    if (keyDef.includes('cmd+')) {\n        cmdDef |= 8;\n        keyDef = keyDef.replace('cmd+', '');\n    }\n    if (keyDef.includes('alt+')) {\n        cmdDef |= 2;\n        keyDef = keyDef.replace('alt+', '');\n    }\n    if (keyDef.includes('shift+')) {\n        cmdDef |= 4;\n        keyDef = keyDef.replace('shift+', '');\n    }\n    if (keyDef.includes('meta+')) {\n        cmdDef |= 8;\n        keyDef = keyDef.replace('meta+', '');\n    }\n    if (keyDef === 'up') {\n        key = 38;\n    }\n    else if (keyDef === 'down') {\n        key = 40;\n    }\n    else if (keyDef === '+' || keyDef === '\"+\"') {\n        key = 171;\n    }\n    else if (keyDef === '-' || keyDef === '\"-\"') {\n        key = 173;\n    }\n    else if (keyDef === 'esc') {\n        key = 27;\n    }\n    else if (keyDef === 'enter') {\n        key = 13;\n    }\n    else if (keyDef === 'space') {\n        key = 32;\n    }\n    else if (keyDef === 'f4') {\n        key = 115;\n    }\n    else if (keyDef === 'backspace') {\n        key = 8;\n    }\n    else if (keyDef === 'home') {\n        key = 36;\n    }\n    else if (keyDef === 'end') {\n        key = 35;\n    }\n    else if (keyDef === 'left') {\n        key = 37;\n    }\n    else if (keyDef === 'right') {\n        key = 39;\n    }\n    else if (keyDef === 'pagedown') {\n        key = 34;\n    }\n    else if (keyDef === 'pageup') {\n        key = 33;\n    }\n    else {\n        key = keyDef.toUpperCase().charCodeAt(0);\n    }\n    return key === keycode && cmd === cmdDef;\n}\n(( /** @type {?} */(window))).isKeyIgnored = isKeyIgnored;\nvar NgxExtendedPdfViewerModule = /** @class */ /*@__PURE__*/ (function () {\n    function NgxExtendedPdfViewerModule() {\n    }\n    return NgxExtendedPdfViewerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nexport { NgxExtendedPdfViewerComponent, NgxExtendedPdfViewerService, NgxExtendedPdfViewerModule, defaultOptions, FindState, VerbosityLevel, PdfDocumentPropertiesOverlayComponent as ɵm, PdfSecondaryToolbarComponent as ɵl, PdfSidebarComponent as ɵk, PdfBookmarkComponent as ɵg, PdfContextMenuComponent as ɵb, PdfDownloadComponent as ɵf, PdfFindInputAreaComponent as ɵq, PdfFindNextComponent as ɵp, PdfFindPreviousComponent as ɵo, PdfFindbarMessageContainerComponent as ɵz, PdfFindHighlightAllComponent as ɵu, PdfFindMatchCaseComponent as ɵt, PdfFindbarOptionsOneContainerComponent as ɵs, PdfFindIgnoreAccentsComponent as ɵw, PdfFindResultsCountComponent as ɵy, PdfFindbarOptionsThreeContainerComponent as ɵx, PdfFindEntireWordComponent as ɵv, PdfFindbarOptionsTwoContainerComponent as ɵr, PdfFindbarComponent as ɵj, PdfSearchInputFieldComponent as ɵn, PdfSplitToolbarButtonComponent as ɵba, PdfOpenFileComponent as ɵd, PdfPagingAreaComponent as ɵi, PdfPresentationModeComponent as ɵc, PdfPrintComponent as ɵe, PdfZoomDropdownComponent as ɵa, PdfZoomToolbarComponent as ɵh };\n//# sourceMappingURL=ngx-extended-pdf-viewer.js.map\n",null]}