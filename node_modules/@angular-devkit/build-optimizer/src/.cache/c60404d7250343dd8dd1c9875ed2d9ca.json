{"remainingRequest":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/ngx-socket-io/src/socket-io.service.js","dependencies":[{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/ngx-socket-io/src/socket-io.service.js","mtime":1596454938000},{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/cache-loader/dist/cjs.js","mtime":1596454942000},{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1596454940000}],"contextDependencies":[],"result":["import { Inject } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { share } from 'rxjs/operators';\nimport * as io from 'socket.io-client';\nimport { SOCKET_CONFIG_TOKEN } from './socket-io.module';\nvar WrappedSocket = /*@__PURE__*/ (function () {\n    function WrappedSocket(config) {\n        this.subscribersCounter = 0;\n        this.emptyConfig = {\n            url: '',\n            options: {}\n        };\n        if (config === undefined)\n            config = this.emptyConfig;\n        var url = config.url;\n        var options = config.options;\n        var ioFunc = io.default ? io.default : io;\n        this.ioSocket = ioFunc(url, options);\n    }\n    WrappedSocket.prototype.on = function (eventName, callback) {\n        this.ioSocket.on(eventName, callback);\n    };\n    WrappedSocket.prototype.once = function (eventName, callback) {\n        this.ioSocket.once(eventName, callback);\n    };\n    WrappedSocket.prototype.connect = function () {\n        return this.ioSocket.connect();\n    };\n    WrappedSocket.prototype.disconnect = function (close) {\n        return this.ioSocket.disconnect.apply(this.ioSocket, arguments);\n    };\n    WrappedSocket.prototype.emit = function (eventName, data, callback) {\n        return this.ioSocket.emit.apply(this.ioSocket, arguments);\n    };\n    WrappedSocket.prototype.removeListener = function (eventName, callback) {\n        return this.ioSocket.removeListener.apply(this.ioSocket, arguments);\n    };\n    WrappedSocket.prototype.removeAllListeners = function (eventName) {\n        return this.ioSocket.removeAllListeners.apply(this.ioSocket, arguments);\n    };\n    WrappedSocket.prototype.fromEvent = function (eventName) {\n        var _this = this;\n        this.subscribersCounter++;\n        return Observable.create(function (observer) {\n            _this.ioSocket.on(eventName, function (data) {\n                observer.next(data);\n            });\n            return function () {\n                if (_this.subscribersCounter === 1)\n                    _this.ioSocket.removeListener(eventName);\n            };\n        }).pipe(share());\n    };\n    WrappedSocket.prototype.fromOneTimeEvent = function (eventName) {\n        var _this = this;\n        return new Promise(function (resolve) { return _this.once(eventName, resolve); });\n    };\n    return WrappedSocket;\n}());\nexport { WrappedSocket };\n//# sourceMappingURL=socket-io.service.js.map\n",null]}