{"remainingRequest":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/ng2-semantic-ui/dist/modules/datepicker/services/calendar-range.service.js","dependencies":[{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/ng2-semantic-ui/dist/modules/datepicker/services/calendar-range.service.js","mtime":1596454950000},{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/cache-loader/dist/cjs.js","mtime":1596454942000},{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1596454940000}],"contextDependencies":[],"result":["import { DateUtil, Util } from \"../../../misc/util/index\";\nimport { CalendarItem } from \"../directives/calendar-item\";\nimport { DateComparer } from \"../classes/date-comparer\";\nvar CalendarRange = /** @class */ /*@__PURE__*/ (function () {\n    function CalendarRange(start, dates, items, grouped, comparer) {\n        this.start = start;\n        this.dates = dates;\n        this.items = items;\n        this.groupedItems = grouped;\n        this._comparer = comparer;\n    }\n    Object.defineProperty(CalendarRange.prototype, \"inRange\", {\n        get: function () {\n            return this.items.filter(function (i) { return !i.isOutsideRange; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CalendarRange.prototype.find = function (item) {\n        var _this = this;\n        return this.items.find(function (i) { return _this._comparer.equal(i.date, item.date); });\n    };\n    CalendarRange.prototype.findIndex = function (item) {\n        var _this = this;\n        if (!item) {\n            return -1;\n        }\n        return this.items.findIndex(function (i) { return _this._comparer.equal(i.date, item.date); });\n    };\n    CalendarRange.prototype.containsDate = function (date) {\n        var _this = this;\n        return !!this.inRange.find(function (i) { return _this._comparer.equal(i.date, date); });\n    };\n    return CalendarRange;\n}());\nexport { CalendarRange };\nvar CalendarRangeService = /** @class */ /*@__PURE__*/ (function () {\n    function CalendarRangeService(interval, rows, columns) {\n        this.interval = interval;\n        this.marginal = interval + 1;\n        this.rows = rows;\n        this.columns = columns;\n    }\n    Object.defineProperty(CalendarRangeService.prototype, \"dateComparer\", {\n        get: function () {\n            return new DateComparer(this.marginal, this.service.inFinalView);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarRangeService.prototype, \"length\", {\n        get: function () {\n            return this.rows * this.columns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarRangeService.prototype, \"canMoveNext\", {\n        get: function () {\n            var firstItem = this.next.inRange[0];\n            if (firstItem && this.service.maxDate) {\n                return firstItem.date <= this.service.maxDate;\n            }\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarRangeService.prototype, \"canMovePrevious\", {\n        get: function () {\n            var lastItem = this.previous.inRange.slice(-1).pop();\n            if (lastItem && this.service.minDate) {\n                return lastItem.date >= this.service.minDate;\n            }\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CalendarRangeService.prototype.loadService = function (service) {\n        this.service = service;\n        this.refresh();\n    };\n    CalendarRangeService.prototype.refresh = function () {\n        this.current = this.calcRange(this.service.currentDate);\n        this.next = this.calcRange(DateUtil.next(this.interval, DateUtil.clone(this.service.currentDate)));\n        this.previous = this.calcRange(DateUtil.previous(this.interval, DateUtil.clone(this.service.currentDate)));\n    };\n    CalendarRangeService.prototype.move = function (forwards) {\n        if (forwards) {\n            return this.moveNext();\n        }\n        return this.movePrevious();\n    };\n    CalendarRangeService.prototype.moveNext = function () {\n        DateUtil.next(this.interval, this.service.currentDate);\n        this.previous = this.current;\n        this.current = this.next;\n        this.next = this.calcRange(DateUtil.next(this.interval, DateUtil.clone(this.service.currentDate)));\n    };\n    CalendarRangeService.prototype.movePrevious = function () {\n        DateUtil.previous(this.interval, this.service.currentDate);\n        this.next = this.current;\n        this.current = this.previous;\n        this.previous = this.calcRange(DateUtil.previous(this.interval, DateUtil.clone(this.service.currentDate)));\n    };\n    CalendarRangeService.prototype.calc = function (forwards) {\n        if (forwards) {\n            return this.next;\n        }\n        return this.previous;\n    };\n    CalendarRangeService.prototype.calcRange = function (startDate) {\n        var start = this.calcStart(startDate);\n        if (this.service.inFinalView) {\n            DateUtil.startOf(this.marginal, start, true);\n        }\n        var dates = this.calcDates(start);\n        var items = this.calcItems(dates, startDate);\n        return new CalendarRange(start, dates, items, Util.Array.group(items, this.columns), this.dateComparer);\n    };\n    CalendarRangeService.prototype.calcStart = function (date) {\n        return DateUtil.startOf(this.interval, DateUtil.clone(date));\n    };\n    CalendarRangeService.prototype.calcDates = function (rangeStart) {\n        var _this = this;\n        return Util.Array\n            .range(this.length)\n            .map(function (i) { return DateUtil.add(_this.marginal, DateUtil.clone(rangeStart), i); });\n    };\n    CalendarRangeService.prototype.calcItems = function (dateRange, baseDate) {\n        var _this = this;\n        return dateRange.map(function (date) {\n            var item = new CalendarItem(date);\n            item.isDisabled = !_this.dateComparer.between(item.date, _this.service.minDate, _this.service.maxDate);\n            item.isActive = _this.dateComparer.equal(item.date, _this.service.selectedDate);\n            item.isToday = _this.dateComparer.equal(item.date, new Date());\n            item.isSelectable = item.isDisabled;\n            _this.configureItem(item, baseDate);\n            return item;\n        });\n    };\n    return CalendarRangeService;\n}());\nexport { CalendarRangeService };\n//# sourceMappingURL=calendar-range.service.js.map\n",null]}