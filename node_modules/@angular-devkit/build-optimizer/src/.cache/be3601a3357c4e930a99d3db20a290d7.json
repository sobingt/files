{"remainingRequest":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/ng2-semantic-ui/dist/modules/dropdown/services/dropdown.service.js","dependencies":[{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/ng2-semantic-ui/dist/modules/dropdown/services/dropdown.service.js","mtime":1596454950000},{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/cache-loader/dist/cjs.js","mtime":1596454942000},{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1596454940000}],"contextDependencies":[],"result":["import { EventEmitter } from \"@angular/core\";\n// Creates essentially a 'string' enum.\nexport var DropdownAutoCloseType = {\n    ItemClick: \"itemClick\",\n    OutsideClick: \"outsideClick\",\n    Disabled: \"disabled\"\n};\nvar DropdownService = /** @class */ /*@__PURE__*/ (function () {\n    function DropdownService(autoCloseMode) {\n        if (autoCloseMode === void 0) {\n            autoCloseMode = DropdownAutoCloseType.ItemClick;\n        }\n        this.isOpen = false;\n        this.isOpenChange = new EventEmitter();\n        this.isDisabled = false;\n        this.autoCloseMode = autoCloseMode;\n        this.children = [];\n    }\n    Object.defineProperty(DropdownService.prototype, \"isNested\", {\n        get: function () {\n            return !!this.parent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DropdownService.prototype.setOpenState = function (isOpen, reflectInParent) {\n        var _this = this;\n        if (reflectInParent === void 0) {\n            reflectInParent = false;\n        }\n        if (this.isOpen !== isOpen && !this.isDisabled) {\n            // Only update the state if it has changed, and the dropdown isn't disabled.\n            this.isOpen = !!isOpen;\n            this.isAnimating = true;\n            // We must delay the emitting to avoid the 'changed after checked' Angular errors.\n            this.delay(function () { return _this.isOpenChange.emit(_this.isOpen); });\n            if (!this.isOpen) {\n                // Close the child dropdowns when this one closes.\n                this.children.forEach(function (c) { return c.setOpenState(_this.isOpen); });\n            }\n            if (this.parent && reflectInParent) {\n                // Open the parent dropdowns when this one opens.\n                this.parent.setOpenState(this.isOpen, true);\n            }\n        }\n        else if (this.isOpen !== isOpen && this.isDisabled) {\n            // If the state has changed, but the dropdown is disabled, re-emit the original isOpen value.\n            this.delay(function () { return _this.isOpenChange.emit(_this.isOpen); });\n        }\n    };\n    DropdownService.prototype.setDisabledState = function (isDisabled) {\n        if (this.isDisabled !== isDisabled) {\n            if (!!isDisabled) {\n                // Close the dropdown as it is now disabled\n                this.setOpenState(false);\n            }\n            this.isDisabled = !!isDisabled;\n        }\n    };\n    DropdownService.prototype.toggleOpenState = function () {\n        this.setOpenState(!this.isOpen);\n    };\n    // Registers a dropdown service as a child of this service.\n    // Registers a dropdown service as a child of this service.\n    DropdownService.prototype.registerChild =\n        // Registers a dropdown service as a child of this service.\n        function (child) {\n            if (!this.isChildRegistered(child)) {\n                this.children.push(child);\n                child.parent = this;\n            }\n        };\n    // Recursive method to check if the provided dropdown is already registered as a child, or is a descendant of a child.\n    // Recursive method to check if the provided dropdown is already registered as a child, or is a descendant of a child.\n    DropdownService.prototype.isChildRegistered =\n        // Recursive method to check if the provided dropdown is already registered as a child, or is a descendant of a child.\n        function (child) {\n            return this === child || !!this.children\n                .find(function (c) {\n                return !!c.children\n                    .find(function (cChild) { return cChild.isChildRegistered(child); });\n            });\n        };\n    // Wipes any nested data, so all services can be cleanly reattached.\n    // Wipes any nested data, so all services can be cleanly reattached.\n    DropdownService.prototype.clearChildren =\n        // Wipes any nested data, so all services can be cleanly reattached.\n        function () {\n            this.children.forEach(function (c) {\n                c.parent = undefined;\n            });\n            this.children = [];\n        };\n    // Method for delaying an event into the next tick, to avoid Angular \"changed after checked\" error.\n    // Method for delaying an event into the next tick, to avoid Angular \"changed after checked\" error.\n    DropdownService.prototype.delay =\n        // Method for delaying an event into the next tick, to avoid Angular \"changed after checked\" error.\n        function (callback) {\n            setTimeout(function () { return callback(); });\n        };\n    return DropdownService;\n}());\nexport { DropdownService };\n//# sourceMappingURL=dropdown.service.js.map\n",null]}