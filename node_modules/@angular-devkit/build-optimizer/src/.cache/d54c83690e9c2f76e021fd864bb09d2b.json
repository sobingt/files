{"remainingRequest":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/html-to-image/lib/getBlobFromURL.js","dependencies":[{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/html-to-image/lib/getBlobFromURL.js","mtime":1596454950000},{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/cache-loader/dist/cjs.js","mtime":1596454942000},{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1596454940000}],"contextDependencies":[],"result":["\"use strict\";\n/* tslint:disable:max-line-length */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils_1 = require(\"./utils\");\n// KNOWN ISSUE\n// -----------\n// Can not handle redirect-url, such as when access 'http://something.com/avatar.png'\n// will redirect to 'http://something.com/65fc2ffcc8aea7ba65a1d1feda173540'\nvar TIMEOUT = 30000;\nfunction getBlobFromURL(url, options) {\n    // cache bypass so we dont have CORS issues with cached images\n    // ref: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n    if (options.cacheBust) {\n        url += ((/\\?/).test(url) ? '&' : '?') + (new Date()).getTime(); // tslint:disable-line\n    }\n    var failed = function (reason) {\n        var placeholder = '';\n        if (options.imagePlaceholder) {\n            var split = options.imagePlaceholder.split(/,/);\n            if (split && split[1]) {\n                placeholder = split[1];\n            }\n        }\n        var msg = \"Failed to fetch resource: \" + url;\n        if (reason) {\n            msg = typeof reason === 'string' ? reason : reason.message;\n        }\n        if (msg) {\n            console.error(msg);\n        }\n        return placeholder;\n    };\n    var deferred = window.fetch\n        // fetch\n        ? window.fetch(url)\n            .then(function (response) { return response.blob(); })\n            .then(function (blob) { return new Promise(function (resolve, reject) {\n            var reader = new FileReader();\n            reader.onloadend = function () { return resolve(reader.result); };\n            reader.onerror = reject;\n            reader.readAsDataURL(blob);\n        }); })\n            .then(utils_1.getDataURLContent)\n            .catch(function () { return new Promise(function (resolve, reject) {\n            reject();\n        }); })\n        // xhr\n        : new Promise((function (resolve, reject) {\n            var req = new XMLHttpRequest();\n            var timeout = function () {\n                reject(new Error(\"Timeout of \" + TIMEOUT + \"ms occured while fetching resource: \" + url));\n            };\n            var done = function () {\n                if (req.readyState !== 4) {\n                    return;\n                }\n                if (req.status !== 200) {\n                    reject(new Error(\"Failed to fetch resource: \" + url + \", status: \" + req.status));\n                    return;\n                }\n                var encoder = new FileReader();\n                encoder.onloadend = function () {\n                    resolve(utils_1.getDataURLContent(encoder.result));\n                };\n                encoder.readAsDataURL(req.response);\n            };\n            req.onreadystatechange = done;\n            req.ontimeout = timeout;\n            req.responseType = 'blob';\n            req.timeout = TIMEOUT;\n            req.open('GET', url, true);\n            req.send();\n        }));\n    return deferred.catch(failed);\n}\nexports.default = getBlobFromURL;\n",null]}