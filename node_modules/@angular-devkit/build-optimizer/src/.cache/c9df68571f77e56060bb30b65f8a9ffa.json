{"remainingRequest":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/ng2-semantic-ui/dist/modules/modal/classes/modal-controls.js","dependencies":[{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/ng2-semantic-ui/dist/modules/modal/classes/modal-controls.js","mtime":1596454950000},{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/cache-loader/dist/cjs.js","mtime":1596454942000},{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1596454940000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\n// Used to pass ability to control a modal to a component.\nvar \n// Used to pass ability to control a modal to a component.\nModalControls = /** @class */ (function () {\n    function ModalControls(approve, deny) {\n        this.approve = approve;\n        this.deny = deny;\n    }\n    // Use method here rather than arrow variables to make intellisense show they're methods.\n    // Use method here rather than arrow variables to make intellisense show they're methods.\n    ModalControls.prototype.approve =\n        // Use method here rather than arrow variables to make intellisense show they're methods.\n        function (result) { };\n    ModalControls.prototype.deny = function (result) { };\n    return ModalControls;\n}());\n// Used to pass ability to control a modal to a component.\nexport { ModalControls };\n// Injected into custom modal components, to allow control of the modal, and access to a context object.\nvar \n// Injected into custom modal components, to allow control of the modal, and access to a context object.\nModal = /** @class */ (function (_super) {\n    __extends(Modal, _super);\n    function Modal(controls, context) {\n        var _this = \n        // Instances of `ModalControls` are only created in the `SuiModal` constructor,\n        // so we take an initialised instance rather than remaking one each time.\n        _super.call(this, controls.approve, controls.deny) || this;\n        _this.context = context;\n        return _this;\n    }\n    return Modal;\n}(ModalControls));\n// Injected into custom modal components, to allow control of the modal, and access to a context object.\nexport { Modal };\n//# sourceMappingURL=modal-controls.js.map\n",null]}