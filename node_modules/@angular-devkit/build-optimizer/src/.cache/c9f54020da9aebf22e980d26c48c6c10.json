{"remainingRequest":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/ng2-semantic-ui/dist/modules/search/services/search.service.js","dependencies":[{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/ng2-semantic-ui/dist/modules/search/services/search.service.js","mtime":1596454950000},{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/cache-loader/dist/cjs.js","mtime":1596454942000},{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1596454940000}],"contextDependencies":[],"result":["import { Util } from \"../../../misc/util/index\";\nvar SearchService = /** @class */ /*@__PURE__*/ (function () {\n    function SearchService(allowEmptyQuery) {\n        if (allowEmptyQuery === void 0) {\n            allowEmptyQuery = false;\n        }\n        var _this = this;\n        this._options = [];\n        this.optionsFilter = function (os, q) {\n            // Convert the query string to a RegExp.\n            var regex = _this.toRegex(_this._query);\n            if (regex instanceof RegExp) {\n                // Only update the results if the query was valid regex.\n                // This avoids the results suddenly becoming empty if an invalid regex string is inputted.\n                return os\n                    .filter(function (o) {\n                    return Util.Object.readValue(o, _this._optionsField)\n                        .toString()\n                        .match(regex);\n                });\n            }\n            // Don't update since it wasn't a valid regex.\n            return false;\n        };\n        // Set default values and reset.\n        this.allowEmptyQuery = allowEmptyQuery;\n        this.searchDelay = 0;\n        this.reset();\n    }\n    Object.defineProperty(SearchService.prototype, \"options\", {\n        get: function () {\n            return this._options;\n        },\n        set: function (options) {\n            this._options = options || [];\n            // We cannot use both local & remote options simultaneously.\n            this._optionsLookup = undefined;\n            // Reset entire service with new options.\n            this.reset();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SearchService.prototype, \"optionsLookup\", {\n        get: function () {\n            return this._optionsLookup;\n        },\n        set: function (lookupFn) {\n            this._optionsLookup = lookupFn;\n            // As before, cannot use local & remote options simultaneously.\n            this._options = [];\n            this.reset();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SearchService.prototype, \"hasItemLookup\", {\n        get: function () {\n            return !!this.optionsLookup && this.optionsLookup.length === 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SearchService.prototype, \"optionsField\", {\n        get: function () {\n            return this._optionsField;\n        },\n        set: function (field) {\n            this._optionsField = field;\n            // We need to reset otherwise we would now be showing invalid search results.\n            this.reset();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SearchService.prototype, \"results\", {\n        get: function () {\n            return this._results;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SearchService.prototype, \"query\", {\n        get: function () {\n            return this._query;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SearchService.prototype, \"isSearching\", {\n        get: function () {\n            return this._isSearching;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Updates the query after the specified search delay.\n    // Updates the query after the specified search delay.\n    SearchService.prototype.updateQueryDelayed =\n        // Updates the query after the specified search delay.\n        function (query, callback) {\n            var _this = this;\n            if (callback === void 0) {\n                callback = function () { };\n            }\n            this._query = query;\n            clearTimeout(this._searchDelayTimeout);\n            this._searchDelayTimeout = window.setTimeout(function () {\n                _this.updateQuery(query, callback);\n            }, this.searchDelay);\n        };\n    // Updates the current search query.\n    // Updates the current search query.\n    SearchService.prototype.updateQuery =\n        // Updates the current search query.\n        function (query, callback) {\n            var _this = this;\n            if (callback === void 0) {\n                callback = function () { };\n            }\n            this._query = query;\n            if (this._query === \"\" && !this.allowEmptyQuery) {\n                // Don't update if the new query is empty (and we don't allow empty queries).\n                // Don't reset so that when animating closed we don't get a judder.\n                return callback();\n            }\n            if (this._resultsCache.hasOwnProperty(this._query)) {\n                // If the query is already cached, make use of it.\n                this._results = this._resultsCache[this._query];\n                return callback();\n            }\n            if (this._optionsLookup) {\n                this._isSearching = true;\n                // Call the options lookup without a this context.\n                var queryLookup = this._optionsLookup.call(undefined, this._query);\n                queryLookup\n                    .then(function (results) {\n                    _this._isSearching = false;\n                    _this.updateResults(results);\n                    return callback();\n                })\n                    .catch(function (error) {\n                    // Unset 'loading' state, and throw the returned error without updating the results.\n                    // Unset 'loading' state, and throw the returned error without updating the results.\n                    _this._isSearching = false;\n                    return callback(error);\n                });\n                return;\n            }\n            var filtered = this.optionsFilter.call(undefined, this._options, this._query);\n            if (filtered) {\n                this.updateResults(filtered);\n            }\n            return callback();\n        };\n    // Updates & caches the new set of results.\n    // Updates & caches the new set of results.\n    SearchService.prototype.updateResults =\n        // Updates & caches the new set of results.\n        function (results) {\n            this._resultsCache[this._query] = results;\n            this._results = results;\n        };\n    // tslint:disable-next-line:promise-function-async\n    // tslint:disable-next-line:promise-function-async\n    SearchService.prototype.initialLookup =\n        // tslint:disable-next-line:promise-function-async\n        function (initial) {\n            if (initial instanceof Array) {\n                return this._optionsLookup(undefined, initial);\n            }\n            return this._optionsLookup(undefined, initial);\n        };\n    // Converts a query string to regex without throwing an error.\n    // Converts a query string to regex without throwing an error.\n    SearchService.prototype.toRegex =\n        // Converts a query string to regex without throwing an error.\n        function (query) {\n            try {\n                return new RegExp(query, \"i\");\n            }\n            catch (e) {\n                return query;\n            }\n        };\n    // Generates HTML for highlighted match text.\n    // Generates HTML for highlighted match text.\n    SearchService.prototype.highlightMatches =\n        // Generates HTML for highlighted match text.\n        function (text, query) {\n            var regex = this.toRegex(query);\n            if (regex instanceof RegExp) {\n                return text.replace(regex, function (match) { return \"<b>\" + match + \"</b>\"; });\n            }\n            return text;\n        };\n    // Resets the search back to a pristine state.\n    // Resets the search back to a pristine state.\n    SearchService.prototype.reset =\n        // Resets the search back to a pristine state.\n        function () {\n            this._results = [];\n            this._resultsCache = {};\n            this._isSearching = false;\n            this.updateQuery(\"\");\n        };\n    return SearchService;\n}());\nexport { SearchService };\n//# sourceMappingURL=search.service.js.map\n",null]}