{"remainingRequest":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/ng2-semantic-ui/dist/modules/datepicker/services/calendar.service.js","dependencies":[{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/ng2-semantic-ui/dist/modules/datepicker/services/calendar.service.js","mtime":1596454950000},{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/cache-loader/dist/cjs.js","mtime":1596454942000},{"path":"/home/vishwvir/company_projects/tata/web/ui_propensity/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1596454940000}],"contextDependencies":[],"result":["import { EventEmitter } from \"@angular/core\";\nimport { DateUtil } from \"../../../misc/util/index\";\nexport var CalendarMode = /*@__PURE__*/ (function (CalendarMode) {\n    CalendarMode[CalendarMode[\"DateOnly\"] = 0] = \"DateOnly\";\n    CalendarMode[CalendarMode[\"TimeOnly\"] = 1] = \"TimeOnly\";\n    CalendarMode[CalendarMode[\"Both\"] = 2] = \"Both\";\n    return CalendarMode;\n})({});\nvar CalendarService = /** @class */ /*@__PURE__*/ (function () {\n    function CalendarService(config, localeValues) {\n        this.localeValues = localeValues;\n        this.onManualUpdate = function () { };\n        this.config = config;\n        this.currentDate = new Date();\n        this.firstDayOfWeek = this.localeValues.firstDayOfWeek;\n        this.onDateChange = new EventEmitter();\n        this.reset();\n    }\n    Object.defineProperty(CalendarService.prototype, \"config\", {\n        get: function () {\n            return this._config;\n        },\n        set: function (config) {\n            this._config = config;\n            config.updateBounds(this._selectedDate || this.currentDate);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarService.prototype, \"inFinalView\", {\n        get: function () {\n            return this.currentView === this.config.mappings.finalView;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarService.prototype, \"selectedDate\", {\n        get: function () {\n            return this._selectedDate;\n        },\n        set: function (date) {\n            if (date) {\n                this._selectedDate = DateUtil.clone(date);\n                this.currentDate = DateUtil.clone(date);\n            }\n            else {\n                this._selectedDate = undefined;\n            }\n            this.config.updateBounds(this._selectedDate || this.currentDate);\n            this.onManualUpdate();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarService.prototype, \"minDate\", {\n        get: function () {\n            if (this._minDate && this.config.dateMinBound) {\n                return this._minDate > this.config.dateMinBound ? this._minDate : this.config.dateMinBound;\n            }\n            return this._minDate || this.config.dateMinBound;\n        },\n        set: function (min) {\n            this._minDate = min;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarService.prototype, \"maxDate\", {\n        get: function () {\n            if (this._maxDate && this.config.dateMaxBound) {\n                return this._maxDate < this.config.dateMaxBound ? this._maxDate : this.config.dateMaxBound;\n            }\n            return this._maxDate || this.config.dateMaxBound;\n        },\n        set: function (max) {\n            this._maxDate = max;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarService.prototype, \"firstDayOfWeek\", {\n        get: function () {\n            return this._firstDayOfWeek;\n        },\n        set: function (firstDayOfWeek) {\n            if (firstDayOfWeek != undefined) {\n                this._firstDayOfWeek = Math.max(0, Math.min(6, firstDayOfWeek));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CalendarService.prototype.reset = function () {\n        this.currentView = this.config.mappings.finalView;\n        if (!this._selectedDate) {\n            var current = this.currentDate.getTime();\n            if (this._minDate) {\n                current = Math.max(current, this._minDate.getTime());\n            }\n            if (this._maxDate) {\n                current = Math.min(current, this._maxDate.getTime());\n            }\n            this.currentDate = new Date(current);\n            this.config.updateBounds(this.currentDate);\n            this.currentView = this.config.mappings.initialView;\n        }\n    };\n    CalendarService.prototype.changeDate = function (date, fromView) {\n        this.currentDate = date;\n        if (fromView === this.config.mappings.finalView) {\n            this.selectedDate = date;\n            return this.onDateChange.emit(date);\n        }\n        this.updateView(this.config.mappings.changed, fromView);\n    };\n    CalendarService.prototype.zoomOut = function (fromView) {\n        this.updateView(this.config.mappings.zoom, fromView);\n    };\n    CalendarService.prototype.updateView = function (mappings, fromView) {\n        var mapping = mappings.get(fromView);\n        if (mapping == undefined) {\n            throw new Error(\"Unknown view type.\");\n        }\n        this.currentView = mapping;\n    };\n    return CalendarService;\n}());\nexport { CalendarService };\n//# sourceMappingURL=calendar.service.js.map\n",null]}